/*! For license information please see queryContext.js.LICENSE.txt */
(()=>{var e={11690:(e,t,n)=>{var r,o;r=[n,t,n(34663)],o=function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getClient=function getClient(e,t){var r=t||{};return r.rootPath||(r.rootPath=n.getService("ms.vss-features.location-service").then((function(t){return e.RESOURCE_AREA_ID?t.getResourceAreaLocation(e.RESOURCE_AREA_ID):t.getServiceLocation()}))),r.authTokenProvider||(r.authTokenProvider={getAuthorizationHeader:function(){return n.getAccessToken().then((function(e){return e?"Bearer "+e:""}))}}),new e(r)}}.apply(t,r),void 0===o||(e.exports=o)},71023:(e,t,n)=>{var r;r=function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){e.ExtensionDataService="ms.vss-features.extension-data-service",e.GlobalMessagesService="ms.vss-tfs-web.tfs-global-messages-service",e.HostNavigationService="ms.vss-features.host-navigation-service",e.HostPageLayoutService="ms.vss-features.host-page-layout-service",e.LocationService="ms.vss-features.location-service",e.ProjectPageService="ms.vss-tfs-web.tfs-page-data-service"}(t.CommonServiceIds||(t.CommonServiceIds={})),function(e){e[e.Deployment=1]="Deployment",e[e.Enterprise=2]="Enterprise",e[e.Organization=4]="Organization"}(t.TeamFoundationHostType||(t.TeamFoundationHostType={})),function(e){e[e.Small=0]="Small",e[e.Medium=1]="Medium",e[e.Large=2]="Large"}(t.PanelSize||(t.PanelSize={})),function(e){e[e.info=0]="info",e[e.warning=1]="warning",e[e.error=2]="error",e[e.success=3]="success"}(t.MessageBannerLevel||(t.MessageBannerLevel={}))}.apply(t,[n,t]),void 0===r||(e.exports=r)},76101:(e,t,n)=>{var r,o;r=[n,t,n(11690),n(71023)],o=function(e,t,n,r){"use strict";function __export(e){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}Object.defineProperty(t,"__esModule",{value:!0}),__export(n),__export(r)}.apply(t,r),void 0===o||(e.exports=o)},64584:(e,t,n)=>{var r,o;r=[n,t,n(76101)],o=function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function __export(e){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}(n)}.apply(t,r),void 0===o||(e.exports=o)},34663:function(e,t,n){var r,o,i=this&&this.__assign||Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},s=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function fulfilled(e){try{step(r.next(e))}catch(e){i(e)}}function rejected(e){try{step(r.throw(e))}catch(e){i(e)}}function step(e){e.done?o(e.value):new n((function(t){t(e.value)})).then(fulfilled,rejected)}step((r=r.apply(e,t||[])).next())}))},a=this&&this.__generator||function(e,t){var n,r,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:verb(0),throw:verb(1),return:verb(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function verb(i){return function(a){return function step(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,r=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!(o=s.trys,(o=o.length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}};r=[n,t,n(64285)],o=function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.sdkVersion=3;var r=window;r._AzureDevOpsSDKVersion&&console.error("The AzureDevOps SDK is already loaded. Only one version of this module can be loaded in a given document."),r._AzureDevOpsSDKVersion=t.sdkVersion,function(e){e[e.Deployment=1]="Deployment",e[e.Enterprise=2]="Enterprise",e[e.Organization=4]="Organization"}(t.HostType||(t.HostType={}));var o,c,u,l,f,h,p,d="DevOps.HostControl",v=n.channelManager.addChannel(window.parent),y=new Promise((function(e){p=e}));function dispatchEvent(e,t){var n,r=window;"function"==typeof r.CustomEvent?n=new r.CustomEvent(e,t):(t=t||{bubbles:!1,cancelable:!1},(n=document.createEvent("CustomEvent")).initCustomEvent(e,t.bubbles,t.cancelable,t.detail)),window.dispatchEvent(n)}function ready(){return s(this,void 0,void 0,(function(){return a(this,(function(e){return[2,y]}))}))}function getWaitForReadyError(e){return"Attempted to call "+e+"() before init() was complete. Wait for init to complete or place within a ready() callback."}function applyTheme(e){h||((h=document.createElement("style")).type="text/css",document.head.appendChild(h));var t=[];if(e)for(var n in e)t.push("--"+n+": "+e[n]);h.innerText=":root { "+t.join("; ")+" } body { color: var(--text-primary-color) }",dispatchEvent("themeApplied",{detail:e})}v.getObjectRegistry().register("DevOps.SdkClient",{dispatchEvent}),t.init=function init(e){return new Promise((function(n){var r=i({},e,{sdkVersion:t.sdkVersion});v.invokeRemoteMethod("initialHandshake",d,[r]).then((function(e){c=e.initialConfig||{},u=e.contributionId;var t=e.context;o=t.extension,l=t.user,f=t.host,e.themeData&&(applyTheme(e.themeData),window.addEventListener("themeChanged",(function(e){applyTheme(e.detail.data)}))),p(),n()}))}))},t.ready=ready,t.notifyLoadSucceeded=function notifyLoadSucceeded(){return v.invokeRemoteMethod("notifyLoadSucceeded",d)},t.notifyLoadFailed=function notifyLoadFailed(e){return v.invokeRemoteMethod("notifyLoadFailed",d,[e])},t.getConfiguration=function getConfiguration(){if(!c)throw new Error(getWaitForReadyError("getConfiguration"));return c},t.getContributionId=function getContributionId(){if(!u)throw new Error(getWaitForReadyError("getContributionId"));return u},t.getUser=function getUser(){if(!l)throw new Error(getWaitForReadyError("getUser"));return l},t.getHost=function getHost(){if(!f)throw new Error(getWaitForReadyError("getHost"));return f},t.getExtensionContext=function getExtensionContext(){if(!o)throw new Error(getWaitForReadyError("getExtensionContext"));return o},t.getService=function getService(e){return s(this,void 0,void 0,(function(){return a(this,(function(t){return[2,ready().then((function(){return v.invokeRemoteMethod("getService","DevOps.ServiceManager",[e])}))]}))}))},t.register=function register(e,t){v.getObjectRegistry().register(e,t)},t.unregister=function unregister(e){v.getObjectRegistry().unregister(e)},t.getAccessToken=function getAccessToken(){return s(this,void 0,void 0,(function(){return a(this,(function(e){return[2,v.invokeRemoteMethod("getAccessToken",d).then((function(e){return e.token}))]}))}))},t.getAppToken=function getAppToken(){return s(this,void 0,void 0,(function(){return a(this,(function(e){return[2,v.invokeRemoteMethod("getAppToken",d).then((function(e){return e.token}))]}))}))},t.resize=function resize(e,t){var n=document.body;if(n){var r="number"==typeof e?e:n?n.scrollWidth:void 0,o="number"==typeof t?t:n?n.scrollHeight:void 0;v.invokeRemoteMethod("resize",d,[r,o])}},t.applyTheme=applyTheme}.apply(t,r),void 0===o||(e.exports=o)},64285:function(e,t,n){var r,o,i=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function fulfilled(e){try{step(r.next(e))}catch(e){i(e)}}function rejected(e){try{step(r.throw(e))}catch(e){i(e)}}function step(e){e.done?o(e.value):new n((function(t){t(e.value)})).then(fulfilled,rejected)}step((r=r.apply(e,t||[])).next())}))},s=this&&this.__generator||function(e,t){var n,r,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:verb(0),throw:verb(1),return:verb(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function verb(i){return function(a){return function step(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,r=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!(o=s.trys,(o=o.length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}};r=[n,t,n(77310),n(47097)],o=function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=parseInt("10000000000",36),r=Number.MAX_SAFE_INTEGER||9007199254740991;var o=function(){function XDMObjectRegistry(){this.objects={}}return XDMObjectRegistry.prototype.register=function(e,t){this.objects[e]=t},XDMObjectRegistry.prototype.unregister=function(e){delete this.objects[e]},XDMObjectRegistry.prototype.getInstance=function(e,t){var n=this.objects[e];if(n)return"function"==typeof n?n(t):n},XDMObjectRegistry}();t.XDMObjectRegistry=o;var a=1,c=function(){function XDMChannel(e,t){this.promises={},this.nextMessageId=1,this.nextProxyId=1,this.proxyFunctions={},this.postToWindow=e,this.targetOrigin=t,this.registry=new o,this.channelId=a++,this.targetOrigin||(this.handshakeToken=function newFingerprint(){return Math.floor(Math.random()*(r-n)+n).toString(36)+Math.floor(Math.random()*(r-n)+n).toString(36)}())}return XDMChannel.prototype.getObjectRegistry=function(){return this.registry},XDMChannel.prototype.invokeRemoteMethod=function(e,t,n,r,o){return i(this,void 0,void 0,(function(){var i,a,c=this;return s(this,(function(s){return i={id:this.nextMessageId++,methodName:e,instanceId:t,instanceContext:r,params:this._customSerializeObject(n,o),serializationSettings:o},this.targetOrigin||(i.handshakeToken=this.handshakeToken),a=new Promise((function(e,t){c.promises[i.id]={resolve:e,reject:t}})),this._sendRpcMessage(i),[2,a]}))}))},XDMChannel.prototype.getRemoteObjectProxy=function(e,t){return this.invokeRemoteMethod("",e,void 0,t)},XDMChannel.prototype.invokeMethod=function(e,t){var n=this;if(t.methodName){var r=e[t.methodName];if("function"==typeof r)try{var o=[];t.params&&(o=this._customDeserializeObject(t.params,{}));var i=r.apply(e,o);i&&i.then&&"function"==typeof i.then?i.then((function(e){n._success(t,e,t.handshakeToken)}),(function(e){n.error(t,e)})):this._success(t,i,t.handshakeToken)}catch(e){this.error(t,e)}else this.error(t,new Error("RPC method not found: "+t.methodName))}else this._success(t,e,t.handshakeToken)},XDMChannel.prototype.getRegisteredObject=function(e,n){if("__proxyFunctions"===e)return this.proxyFunctions;var r=this.registry.getInstance(e,n);return r||(r=t.globalObjectRegistry.getInstance(e,n)),r},XDMChannel.prototype.onMessage=function(e){var t=this;if(e.instanceId){var n=this.getRegisteredObject(e.instanceId,e.instanceContext);if(!n)return!1;"function"==typeof n.then?n.then((function(n){t.invokeMethod(n,e)}),(function(n){t.error(e,n)})):this.invokeMethod(n,e)}else{var r=this.promises[e.id];if(!r)return!1;e.error?r.reject(this._customDeserializeObject([e.error],{})[0]):r.resolve(this._customDeserializeObject([e.result],{})[0]),delete this.promises[e.id]}return!0},XDMChannel.prototype.owns=function(e,t,n){if(this.postToWindow===e){if(this.targetOrigin)return!!t&&("null"===t.toLowerCase()||0===this.targetOrigin.toLowerCase().indexOf(t.toLowerCase()));if(n.handshakeToken&&n.handshakeToken===this.handshakeToken)return this.targetOrigin=t,!0}return!1},XDMChannel.prototype.error=function(e,t){this._sendRpcMessage({id:e.id,error:this._customSerializeObject([t],e.serializationSettings)[0],handshakeToken:e.handshakeToken})},XDMChannel.prototype._success=function(e,t,n){this._sendRpcMessage({id:e.id,result:this._customSerializeObject([t],e.serializationSettings)[0],handshakeToken:n})},XDMChannel.prototype._sendRpcMessage=function(e){this.postToWindow.postMessage(JSON.stringify(e),"*")},XDMChannel.prototype._customSerializeObject=function(e,t,n,r,o){var i=this;if(void 0===r&&(r=1),void 0===o&&(o=1),e&&!(o>100)&&!(e instanceof Node||e instanceof Window||e instanceof Event)){var s,a;(a=n||{newObjects:[],originalObjects:[]}).originalObjects.push(e);var serializeMember=function(n,s,c){var u;try{u=n[c]}catch(e){}var l=typeof u;if("undefined"!==l){var f=-1;if("object"===l&&(f=a.originalObjects.indexOf(u)),f>=0){var h=a.newObjects[f];h.__circularReferenceId||(h.__circularReferenceId=r++),s[c]={__circularReference:h.__circularReferenceId}}else if("function"===l){i.nextProxyId++;s[c]={__proxyFunctionId:i._registerProxyFunction(u,e),_channelId:i.channelId}}else"object"===l?u&&u instanceof Date?s[c]={__proxyDate:u.getTime()}:s[c]=i._customSerializeObject(u,t,a,r,o+1):"__proxyFunctionId"!==c&&(s[c]=u)}};if(e instanceof Array){s=[],a.newObjects.push(s);for(var c=0,u=e.length;c<u;c++)serializeMember(e,s,c)}else{s={},a.newObjects.push(s);var l={};try{l=function getAllPropertyNames(e){for(var t={};e&&e!==Object.prototype;){for(var n=0,r=Object.getOwnPropertyNames(e);n<r.length;n++){var o=r[n];"constructor"!==o&&(t[o]=!0)}e=Object.getPrototypeOf(e)}return t}(e)}catch(e){}for(var f in l)(f&&"_"!==f[0]||t&&t.includeUnderscoreProperties)&&serializeMember(e,s,f)}return a.originalObjects.pop(),a.newObjects.pop(),s}},XDMChannel.prototype._registerProxyFunction=function(e,t){var n=this.nextProxyId++;return this.proxyFunctions["proxy"+n]=function(){return e.apply(t,Array.prototype.slice.call(arguments,0))},n},XDMChannel.prototype._customDeserializeObject=function(e,t){var n=this,r=this;if(!e)return null;var deserializeMember=function(e,o){var i=e[o],s=typeof i;"__circularReferenceId"===o&&"number"===s?(t[i]=e,delete e[o]):"object"===s&&i&&(i.__proxyFunctionId?e[o]=function(){return r.invokeRemoteMethod("proxy"+i.__proxyFunctionId,"__proxyFunctions",Array.prototype.slice.call(arguments,0),{},{includeUnderscoreProperties:!0})}:i.__proxyDate?e[o]=new Date(i.__proxyDate):i.__circularReference?e[o]=t[i.__circularReference]:n._customDeserializeObject(i,t))};if(e instanceof Array)for(var o=0,i=e.length;o<i;o++)deserializeMember(e,o);else if("object"==typeof e)for(var s in e)deserializeMember(e,s);return e},XDMChannel}();t.XDMChannel=c;var u=function(){function XDMChannelManager(){var e=this;this._channels=[],this._handleMessageReceived=function(t){var n;if("string"==typeof t.data)try{n=JSON.parse(t.data)}catch(e){}if(n){for(var r=!1,o=void 0,i=0,s=e._channels;i<s.length;i++){var a=s[i];a.owns(t.source,t.origin,n)&&(o=a,r=a.onMessage(n)||r)}o&&!r&&(window.console&&console.error("No handler found on any channel for message: "+JSON.stringify(n)),n.instanceId&&o.error(n,new Error("The registered object "+n.instanceId+" could not be found.")))}},window.addEventListener("message",this._handleMessageReceived)}return XDMChannelManager.prototype.addChannel=function(e,t){var n=new c(e,t);return this._channels.push(n),n},XDMChannelManager.prototype.removeChannel=function(e){this._channels=this._channels.filter((function(t){return t!==e}))},XDMChannelManager}();t.globalObjectRegistry=new o,t.channelManager=new u}.apply(t,r),void 0===o||(e.exports=o)},47097:(e,t,n)=>{"use strict";n(8091).polyfill()},8091:e=>{"use strict";function assign(e,t){if(null==e)throw new TypeError("Cannot convert first argument to object");for(var n=Object(e),r=1;r<arguments.length;r++){var o=arguments[r];if(null!=o)for(var i=Object.keys(Object(o)),s=0,a=i.length;s<a;s++){var c=i[s],u=Object.getOwnPropertyDescriptor(o,c);void 0!==u&&u.enumerable&&(n[c]=o[c])}}return n}e.exports={assign,polyfill:function polyfill(){Object.assign||Object.defineProperty(Object,"assign",{enumerable:!1,configurable:!0,writable:!0,value:assign})}}},77310:(e,t,n)=>{"use strict";e.exports=n(82702).polyfill()},82702:function(e,t,n){e.exports=function(){"use strict";function objectOrFunction(e){var t=typeof e;return null!==e&&("object"===t||"function"===t)}function isFunction(e){return"function"==typeof e}var e=Array.isArray?Array.isArray:function(e){return"[object Array]"===Object.prototype.toString.call(e)},t=0,r=void 0,o=void 0,i=function asap(e,n){f[t]=e,f[t+1]=n,2===(t+=2)&&(o?o(flush):h())};function setScheduler(e){o=e}function setAsap(e){i=e}var s="undefined"!=typeof window?window:void 0,a=s||{},c=a.MutationObserver||a.WebKitMutationObserver,u="undefined"==typeof self&&"undefined"!=typeof process&&"[object process]"==={}.toString.call(process),l="undefined"!=typeof Uint8ClampedArray&&"undefined"!=typeof importScripts&&"undefined"!=typeof MessageChannel;function useNextTick(){return function(){return process.nextTick(flush)}}function useVertxTimer(){return void 0!==r?function(){r(flush)}:useSetTimeout()}function useMutationObserver(){var e=0,t=new c(flush),n=document.createTextNode("");return t.observe(n,{characterData:!0}),function(){n.data=e=++e%2}}function useMessageChannel(){var e=new MessageChannel;return e.port1.onmessage=flush,function(){return e.port2.postMessage(0)}}function useSetTimeout(){var e=setTimeout;return function(){return e(flush,1)}}var f=new Array(1e3);function flush(){for(var e=0;e<t;e+=2)(0,f[e])(f[e+1]),f[e]=void 0,f[e+1]=void 0;t=0}function attemptVertx(){try{var e=Function("return this")().require("vertx");return r=e.runOnLoop||e.runOnContext,useVertxTimer()}catch(e){return useSetTimeout()}}var h=void 0;function then(e,t){var n=this,r=new this.constructor(noop);void 0===r[p]&&makePromise(r);var o=n._state;if(o){var s=arguments[o-1];i((function(){return invokeCallback(o,r,s,n._result)}))}else subscribe(n,r,e,t);return r}function resolve$1(e){var t=this;if(e&&"object"==typeof e&&e.constructor===t)return e;var n=new t(noop);return resolve(n,e),n}h=u?useNextTick():c?useMutationObserver():l?useMessageChannel():void 0===s?attemptVertx():useSetTimeout();var p=Math.random().toString(36).substring(2);function noop(){}var d=void 0,v=1,y=2;function selfFulfillment(){return new TypeError("You cannot resolve a promise with itself")}function cannotReturnOwn(){return new TypeError("A promises callback cannot return that same promise.")}function tryThen(e,t,n,r){try{e.call(t,n,r)}catch(e){return e}}function handleForeignThenable(e,t,n){i((function(e){var r=!1,o=tryThen(n,t,(function(n){r||(r=!0,t!==n?resolve(e,n):fulfill(e,n))}),(function(t){r||(r=!0,reject(e,t))}),"Settle: "+(e._label||" unknown promise"));!r&&o&&(r=!0,reject(e,o))}),e)}function handleOwnThenable(e,t){t._state===v?fulfill(e,t._result):t._state===y?reject(e,t._result):subscribe(t,void 0,(function(t){return resolve(e,t)}),(function(t){return reject(e,t)}))}function handleMaybeThenable(e,t,n){t.constructor===e.constructor&&n===then&&t.constructor.resolve===resolve$1?handleOwnThenable(e,t):void 0===n?fulfill(e,t):isFunction(n)?handleForeignThenable(e,t,n):fulfill(e,t)}function resolve(e,t){if(e===t)reject(e,selfFulfillment());else if(objectOrFunction(t)){var n=void 0;try{n=t.then}catch(t){return void reject(e,t)}handleMaybeThenable(e,t,n)}else fulfill(e,t)}function publishRejection(e){e._onerror&&e._onerror(e._result),publish(e)}function fulfill(e,t){e._state===d&&(e._result=t,e._state=v,0!==e._subscribers.length&&i(publish,e))}function reject(e,t){e._state===d&&(e._state=y,e._result=t,i(publishRejection,e))}function subscribe(e,t,n,r){var o=e._subscribers,s=o.length;e._onerror=null,o[s]=t,o[s+v]=n,o[s+y]=r,0===s&&e._state&&i(publish,e)}function publish(e){var t=e._subscribers,n=e._state;if(0!==t.length){for(var r=void 0,o=void 0,i=e._result,s=0;s<t.length;s+=3)r=t[s],o=t[s+n],r?invokeCallback(n,r,o,i):o(i);e._subscribers.length=0}}function invokeCallback(e,t,n,r){var o=isFunction(n),i=void 0,s=void 0,a=!0;if(o){try{i=n(r)}catch(e){a=!1,s=e}if(t===i)return void reject(t,cannotReturnOwn())}else i=r;t._state!==d||(o&&a?resolve(t,i):!1===a?reject(t,s):e===v?fulfill(t,i):e===y&&reject(t,i))}function initializePromise(e,t){try{t((function resolvePromise(t){resolve(e,t)}),(function rejectPromise(t){reject(e,t)}))}catch(t){reject(e,t)}}var g=0;function nextId(){return g++}function makePromise(e){e[p]=g++,e._state=void 0,e._result=void 0,e._subscribers=[]}function validationError(){return new Error("Array Methods must be provided an Array")}var _=function(){function Enumerator(t,n){this._instanceConstructor=t,this.promise=new t(noop),this.promise[p]||makePromise(this.promise),e(n)?(this.length=n.length,this._remaining=n.length,this._result=new Array(this.length),0===this.length?fulfill(this.promise,this._result):(this.length=this.length||0,this._enumerate(n),0===this._remaining&&fulfill(this.promise,this._result))):reject(this.promise,validationError())}return Enumerator.prototype._enumerate=function _enumerate(e){for(var t=0;this._state===d&&t<e.length;t++)this._eachEntry(e[t],t)},Enumerator.prototype._eachEntry=function _eachEntry(e,t){var n=this._instanceConstructor,r=n.resolve;if(r===resolve$1){var o=void 0,i=void 0,s=!1;try{o=e.then}catch(e){s=!0,i=e}if(o===then&&e._state!==d)this._settledAt(e._state,t,e._result);else if("function"!=typeof o)this._remaining--,this._result[t]=e;else if(n===m){var a=new n(noop);s?reject(a,i):handleMaybeThenable(a,e,o),this._willSettleAt(a,t)}else this._willSettleAt(new n((function(t){return t(e)})),t)}else this._willSettleAt(r(e),t)},Enumerator.prototype._settledAt=function _settledAt(e,t,n){var r=this.promise;r._state===d&&(this._remaining--,e===y?reject(r,n):this._result[t]=n),0===this._remaining&&fulfill(r,this._result)},Enumerator.prototype._willSettleAt=function _willSettleAt(e,t){var n=this;subscribe(e,void 0,(function(e){return n._settledAt(v,t,e)}),(function(e){return n._settledAt(y,t,e)}))},Enumerator}();function all(e){return new _(this,e).promise}function race(t){var n=this;return e(t)?new n((function(e,r){for(var o=t.length,i=0;i<o;i++)n.resolve(t[i]).then(e,r)})):new n((function(e,t){return t(new TypeError("You must pass an array to race."))}))}function reject$1(e){var t=new this(noop);return reject(t,e),t}function needsResolver(){throw new TypeError("You must pass a resolver function as the first argument to the promise constructor")}function needsNew(){throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.")}var m=function(){function Promise(e){this[p]=nextId(),this._result=this._state=void 0,this._subscribers=[],noop!==e&&("function"!=typeof e&&needsResolver(),this instanceof Promise?initializePromise(this,e):needsNew())}return Promise.prototype.catch=function _catch(e){return this.then(null,e)},Promise.prototype.finally=function _finally(e){var t=this,n=t.constructor;return isFunction(e)?t.then((function(t){return n.resolve(e()).then((function(){return t}))}),(function(t){return n.resolve(e()).then((function(){throw t}))})):t.then(e,e)},Promise}();function polyfill(){var e=void 0;if(void 0!==n.g)e=n.g;else if("undefined"!=typeof self)e=self;else try{e=Function("return this")()}catch(e){throw new Error("polyfill failed because global object is unavailable in this environment")}var t=e.Promise;if(t){var r=null;try{r=Object.prototype.toString.call(t.resolve())}catch(e){}if("[object Promise]"===r&&!t.cast)return}e.Promise=m}return m.prototype.then=then,m.all=all,m.race=race,m.resolve=resolve$1,m.reject=reject$1,m._setScheduler=setScheduler,m._setAsap=setAsap,m._asap=i,m.polyfill=polyfill,m.Promise=m,m}()}},t={};function __webpack_require__(n){var r=t[n];if(void 0!==r)return r.exports;var o=t[n]={exports:{}};return e[n].call(o.exports,o,o.exports,__webpack_require__),o.exports}__webpack_require__.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),(()=>{"use strict";var e=__webpack_require__(34663);const t=function finallyConstructor(e){var t=this.constructor;return this.then((function(n){return t.resolve(e()).then((function(){return n}))}),(function(n){return t.resolve(e()).then((function(){return t.reject(n)}))}))};const n=function allSettled(e){return new this((function(t,n){if(!e||void 0===e.length)return n(new TypeError(typeof e+" "+e+" is not iterable(cannot read property Symbol(Symbol.iterator))"));var r=Array.prototype.slice.call(e);if(0===r.length)return t([]);var o=r.length;function res(e,n){if(n&&("object"==typeof n||"function"==typeof n)){var i=n.then;if("function"==typeof i)return void i.call(n,(function(t){res(e,t)}),(function(n){r[e]={status:"rejected",reason:n},0==--o&&t(r)}))}r[e]={status:"fulfilled",value:n},0==--o&&t(r)}for(var i=0;i<r.length;i++)res(i,r[i])}))};function AggregateError(e,t){this.name="AggregateError",this.errors=e,this.message=t||""}AggregateError.prototype=Error.prototype;const r=function any(e){var t=this;return new t((function(n,r){if(!e||void 0===e.length)return r(new TypeError("Promise.any accepts an array"));var o=Array.prototype.slice.call(e);if(0===o.length)return r();for(var i=[],s=0;s<o.length;s++)try{t.resolve(o[s]).then(n).catch((function(e){i.push(e),i.length===o.length&&r(new AggregateError(i,"All promises were rejected"))}))}catch(e){r(e)}}))};var o=setTimeout;function isArray(e){return Boolean(e&&void 0!==e.length)}function noop(){}function src_Promise(e){if(!(this instanceof src_Promise))throw new TypeError("Promises must be constructed via new");if("function"!=typeof e)throw new TypeError("not a function");this._state=0,this._handled=!1,this._value=void 0,this._deferreds=[],doResolve(e,this)}function handle(e,t){for(;3===e._state;)e=e._value;0!==e._state?(e._handled=!0,src_Promise._immediateFn((function(){var n=1===e._state?t.onFulfilled:t.onRejected;if(null!==n){var r;try{r=n(e._value)}catch(e){return void reject(t.promise,e)}resolve(t.promise,r)}else(1===e._state?resolve:reject)(t.promise,e._value)}))):e._deferreds.push(t)}function resolve(e,t){try{if(t===e)throw new TypeError("A promise cannot be resolved with itself.");if(t&&("object"==typeof t||"function"==typeof t)){var n=t.then;if(t instanceof src_Promise)return e._state=3,e._value=t,void finale(e);if("function"==typeof n)return void doResolve(function bind(e,t){return function(){e.apply(t,arguments)}}(n,t),e)}e._state=1,e._value=t,finale(e)}catch(t){reject(e,t)}}function reject(e,t){e._state=2,e._value=t,finale(e)}function finale(e){2===e._state&&0===e._deferreds.length&&src_Promise._immediateFn((function(){e._handled||src_Promise._unhandledRejectionFn(e._value)}));for(var t=0,n=e._deferreds.length;t<n;t++)handle(e,e._deferreds[t]);e._deferreds=null}function Handler(e,t,n){this.onFulfilled="function"==typeof e?e:null,this.onRejected="function"==typeof t?t:null,this.promise=n}function doResolve(e,t){var n=!1;try{e((function(e){n||(n=!0,resolve(t,e))}),(function(e){n||(n=!0,reject(t,e))}))}catch(e){if(n)return;n=!0,reject(t,e)}}src_Promise.prototype.catch=function(e){return this.then(null,e)},src_Promise.prototype.then=function(e,t){var n=new this.constructor(noop);return handle(this,new Handler(e,t,n)),n},src_Promise.prototype.finally=t,src_Promise.all=function(e){return new src_Promise((function(t,n){if(!isArray(e))return n(new TypeError("Promise.all accepts an array"));var r=Array.prototype.slice.call(e);if(0===r.length)return t([]);var o=r.length;function res(e,i){try{if(i&&("object"==typeof i||"function"==typeof i)){var s=i.then;if("function"==typeof s)return void s.call(i,(function(t){res(e,t)}),n)}r[e]=i,0==--o&&t(r)}catch(e){n(e)}}for(var i=0;i<r.length;i++)res(i,r[i])}))},src_Promise.any=r,src_Promise.allSettled=n,src_Promise.resolve=function(e){return e&&"object"==typeof e&&e.constructor===src_Promise?e:new src_Promise((function(t){t(e)}))},src_Promise.reject=function(e){return new src_Promise((function(t,n){n(e)}))},src_Promise.race=function(e){return new src_Promise((function(t,n){if(!isArray(e))return n(new TypeError("Promise.race accepts an array"));for(var r=0,o=e.length;r<o;r++)src_Promise.resolve(e[r]).then(t,n)}))},src_Promise._immediateFn="function"==typeof setImmediate&&function(e){setImmediate(e)}||function(e){o(e,0)},src_Promise._unhandledRejectionFn=function _unhandledRejectionFn(e){"undefined"!=typeof console&&console&&console.warn("Possible Unhandled Promise Rejection:",e)};const i=src_Promise;var s=function(){if("undefined"!=typeof self)return self;if("undefined"!=typeof window)return window;if(void 0!==__webpack_require__.g)return __webpack_require__.g;throw new Error("unable to locate global object")}();"function"!=typeof s.Promise?s.Promise=i:(s.Promise.prototype.finally||(s.Promise.prototype.finally=t),s.Promise.allSettled||(s.Promise.allSettled=n),s.Promise.any||(s.Promise.any=r));var a,c=__webpack_require__(64584),__awaiter=function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function fulfilled(e){try{step(r.next(e))}catch(e){i(e)}}function rejected(e){try{step(r.throw(e))}catch(e){i(e)}}function step(e){e.done?o(e.value):function adopt(e){return e instanceof n?e:new n((function(t){t(e)}))}(e.value).then(fulfilled,rejected)}step((r=r.apply(e,t||[])).next())}))},__generator=function(e,t){var n,r,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:verb(0),throw:verb(1),return:verb(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function verb(i){return function(a){return function step(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,r=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!(o=s.trys,(o=o.length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}};function showDialog(t){return __awaiter(this,void 0,void 0,(function(){var n,r,o,i,s,a=this;return __generator(this,(function(u){switch(u.label){case 0:return[4,e.getService(c.CommonServiceIds.HostPageLayoutService)];case 1:return n=u.sent(),function(){return __awaiter(a,void 0,void 0,(function(){return __generator(this,(function(e){throw new Error("ok callback not set")}))}))},function(){throw new Error("could not find close dialog function")},r={query:t,initialValue:!1,loaded:function(e){return __awaiter(a,void 0,void 0,(function(){return __generator(this,(function(t){return e.okCallback,[2]}))}))}},o={title:t.name,configuration:r,size:c.PanelSize.Large,onClose:function(e){}},i=e.getExtensionContext(),s=i.publisherId+"."+i.extensionId+".contextForm",n.openPanel(s,o),[2]}}))}))}!function(e){e.AssignedToMe="A2108D31-086C-4FB0-AFDA-097E4CC46DF4",e.UnsavedWorkItems="B7A26A56-EA87-4C97-A504-3F028808BB9F",e.FollowedWorkItems="202230E0-821E-401D-96D1-24A7202330D0",e.CreatedBy="53FB153F-C52C-42F1-90B6-CA17FC3561A8",e.SearchResults="2CBF5136-1AE5-4948-B59A-36F526D9AC73",e.CustomWiql="08E20883-D56C-4461-88EB-CE77C0C7936D",e.RecycleBin="2650C586-0DE4-4156-BA0E-14BCFB664CCA"}(a||(a={}));a.AssignedToMe,a.UnsavedWorkItems,a.FollowedWorkItems,a.CreatedBy,a.SearchResults,a.CustomWiql,a.RecycleBin;var u={execute:function(e){return showDialog(e.query),e&&e.query?{action:function(e){showDialog(e.query)}}:{}}};e.register("query-menu",u),e.register("query-results-menu",u),e.init()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,