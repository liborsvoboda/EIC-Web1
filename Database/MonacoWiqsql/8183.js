"use strict";(self.webpackChunkwiql_editor=self.webpackChunkwiql_editor||[]).push([[8183],{68183:(e,t,n)=>{n.r(t),n.d(t,{getJavaScriptWorker:()=>getJavaScriptWorker,getTypeScriptWorker:()=>getTypeScriptWorker,setupJavaScript:()=>setupJavaScript,setupTypeScript:()=>setupTypeScript});var r,i,o=n(91429),__awaiter=function(e,t,n,r){return new(n||(n=Promise))((function(i,o){function fulfilled(e){try{step(r.next(e))}catch(e){o(e)}}function rejected(e){try{step(r.throw(e))}catch(e){o(e)}}function step(e){e.done?i(e.value):function adopt(e){return e instanceof n?e:new n((function(t){t(e)}))}(e.value).then(fulfilled,rejected)}step((r=r.apply(e,t||[])).next())}))},__generator=function(e,t){var n,r,i,o,s={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:verb(0),throw:verb(1),return:verb(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function verb(o){return function(a){return function step(o){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return s.label++,{value:o[1],done:!1};case 5:s.label++,r=o[1],o=[0];continue;case 7:o=s.ops.pop(),s.trys.pop();continue;default:if(!(i=s.trys,(i=i.length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){s=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){s.label=o[1];break}if(6===o[0]&&s.label<i[1]){s.label=i[1],i=o;break}if(i&&s.label<i[2]){s.label=i[2],s.ops.push(o);break}i[2]&&s.ops.pop(),s.trys.pop();continue}o=t.call(e,s)}catch(e){o=[6,e],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,a])}}},s=function(){function WorkerManager(e,t){var n=this;this._modeId=e,this._defaults=t,this._worker=null,this._client=null,this._configChangeListener=this._defaults.onDidChange((function(){return n._stopWorker()})),this._updateExtraLibsToken=0,this._extraLibsChangeListener=this._defaults.onDidExtraLibsChange((function(){return n._updateExtraLibs()}))}return WorkerManager.prototype._stopWorker=function(){this._worker&&(this._worker.dispose(),this._worker=null),this._client=null},WorkerManager.prototype.dispose=function(){this._configChangeListener.dispose(),this._extraLibsChangeListener.dispose(),this._stopWorker()},WorkerManager.prototype._updateExtraLibs=function(){return __awaiter(this,void 0,void 0,(function(){var e,t;return __generator(this,(function(n){switch(n.label){case 0:return this._worker?(e=++this._updateExtraLibsToken,[4,this._worker.getProxy()]):[2];case 1:return t=n.sent(),this._updateExtraLibsToken!==e?[2]:(t.updateExtraLibs(this._defaults.getExtraLibs()),[2])}}))}))},WorkerManager.prototype._getClient=function(){var e=this;if(!this._client){this._worker=o.j6.createWebWorker({moduleId:"vs/language/typescript/tsWorker",label:this._modeId,keepIdleModels:!0,createData:{compilerOptions:this._defaults.getCompilerOptions(),extraLibs:this._defaults.getExtraLibs(),customWorkerPath:this._defaults.workerOptions.customWorkerPath}});var t=this._worker.getProxy();this._defaults.getEagerModelSync()&&(t=t.then((function(t){return e._worker?e._worker.withSyncedResources(o.j6.getModels().filter((function(t){return t.getModeId()===e._modeId})).map((function(e){return e.uri}))):t}))),this._client=t}return this._client},WorkerManager.prototype.getLanguageServiceWorker=function(){for(var e,t=this,n=[],r=0;r<arguments.length;r++)n[r]=arguments[r];return this._getClient().then((function(t){e=t})).then((function(e){if(t._worker)return t._worker.withSyncedResources(n)})).then((function(t){return e}))},WorkerManager}(),a={"lib.d.ts":!0,"lib.dom.d.ts":!0,"lib.dom.iterable.d.ts":!0,"lib.es2015.collection.d.ts":!0,"lib.es2015.core.d.ts":!0,"lib.es2015.d.ts":!0,"lib.es2015.generator.d.ts":!0,"lib.es2015.iterable.d.ts":!0,"lib.es2015.promise.d.ts":!0,"lib.es2015.proxy.d.ts":!0,"lib.es2015.reflect.d.ts":!0,"lib.es2015.symbol.d.ts":!0,"lib.es2015.symbol.wellknown.d.ts":!0,"lib.es2016.array.include.d.ts":!0,"lib.es2016.d.ts":!0,"lib.es2016.full.d.ts":!0,"lib.es2017.d.ts":!0,"lib.es2017.full.d.ts":!0,"lib.es2017.intl.d.ts":!0,"lib.es2017.object.d.ts":!0,"lib.es2017.sharedmemory.d.ts":!0,"lib.es2017.string.d.ts":!0,"lib.es2017.typedarrays.d.ts":!0,"lib.es2018.asyncgenerator.d.ts":!0,"lib.es2018.asynciterable.d.ts":!0,"lib.es2018.d.ts":!0,"lib.es2018.full.d.ts":!0,"lib.es2018.intl.d.ts":!0,"lib.es2018.promise.d.ts":!0,"lib.es2018.regexp.d.ts":!0,"lib.es2019.array.d.ts":!0,"lib.es2019.d.ts":!0,"lib.es2019.full.d.ts":!0,"lib.es2019.object.d.ts":!0,"lib.es2019.string.d.ts":!0,"lib.es2019.symbol.d.ts":!0,"lib.es2020.bigint.d.ts":!0,"lib.es2020.d.ts":!0,"lib.es2020.full.d.ts":!0,"lib.es2020.intl.d.ts":!0,"lib.es2020.promise.d.ts":!0,"lib.es2020.string.d.ts":!0,"lib.es2020.symbol.wellknown.d.ts":!0,"lib.es5.d.ts":!0,"lib.es6.d.ts":!0,"lib.esnext.d.ts":!0,"lib.esnext.full.d.ts":!0,"lib.esnext.intl.d.ts":!0,"lib.esnext.promise.d.ts":!0,"lib.esnext.string.d.ts":!0,"lib.scripthost.d.ts":!0,"lib.webworker.d.ts":!0,"lib.webworker.importscripts.d.ts":!0},u=(r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},r(e,t)},function(e,t){function __(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(__.prototype=t.prototype,new __)}),languageFeatures_awaiter=function(e,t,n,r){return new(n||(n=Promise))((function(i,o){function fulfilled(e){try{step(r.next(e))}catch(e){o(e)}}function rejected(e){try{step(r.throw(e))}catch(e){o(e)}}function step(e){e.done?i(e.value):function adopt(e){return e instanceof n?e:new n((function(t){t(e)}))}(e.value).then(fulfilled,rejected)}step((r=r.apply(e,t||[])).next())}))},languageFeatures_generator=function(e,t){var n,r,i,o,s={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:verb(0),throw:verb(1),return:verb(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function verb(o){return function(a){return function step(o){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return s.label++,{value:o[1],done:!1};case 5:s.label++,r=o[1],o=[0];continue;case 7:o=s.ops.pop(),s.trys.pop();continue;default:if(!(i=s.trys,(i=i.length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){s=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){s.label=o[1];break}if(6===o[0]&&s.label<i[1]){s.label=i[1],i=o;break}if(i&&s.label<i[2]){s.label=i[2],s.ops.push(o);break}i[2]&&s.ops.pop(),s.trys.pop();continue}o=t.call(e,s)}catch(e){o=[6,e],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,a])}}};function flattenDiagnosticMessageText(e,t,n){if(void 0===n&&(n=0),"string"==typeof e)return e;if(void 0===e)return"";var r="";if(n){r+=t;for(var i=0;i<n;i++)r+="  "}if(r+=e.messageText,n++,e.next)for(var o=0,s=e.next;o<s.length;o++){r+=flattenDiagnosticMessageText(s[o],t,n)}return r}function displayPartsToString(e){return e?e.map((function(e){return e.text})).join(""):""}!function(e){e[e.None=0]="None",e[e.Block=1]="Block",e[e.Smart=2]="Smart"}(i||(i={}));var c,l=function(){function Adapter(e){this._worker=e}return Adapter.prototype._textSpanToRange=function(e,t){var n=e.getPositionAt(t.start),r=e.getPositionAt(t.start+t.length);return{startLineNumber:n.lineNumber,startColumn:n.column,endLineNumber:r.lineNumber,endColumn:r.column}},Adapter}(),p=function(){function LibFiles(e){this._worker=e,this._libFiles={},this._hasFetchedLibFiles=!1,this._fetchLibFilesPromise=null}return LibFiles.prototype.isLibFile=function(e){return!!e&&(0===e.path.indexOf("/lib.")&&!!a[e.path.slice(1)])},LibFiles.prototype.getOrCreateModel=function(e){var t=o.j6.getModel(e);return t||(this.isLibFile(e)&&this._hasFetchedLibFiles?o.j6.createModel(this._libFiles[e.path.slice(1)],"javascript",e):null)},LibFiles.prototype._containsLibFile=function(e){for(var t=0,n=e;t<n.length;t++){var r=n[t];if(this.isLibFile(r))return!0}return!1},LibFiles.prototype.fetchLibFilesIfNecessary=function(e){return languageFeatures_awaiter(this,void 0,void 0,(function(){return languageFeatures_generator(this,(function(t){switch(t.label){case 0:return this._containsLibFile(e)?[4,this._fetchLibFiles()]:[2];case 1:return t.sent(),[2]}}))}))},LibFiles.prototype._fetchLibFiles=function(){var e=this;return this._fetchLibFilesPromise||(this._fetchLibFilesPromise=this._worker().then((function(e){return e.getLibFiles()})).then((function(t){e._hasFetchedLibFiles=!0,e._libFiles=t}))),this._fetchLibFilesPromise},LibFiles}();!function(e){e[e.Warning=0]="Warning",e[e.Error=1]="Error",e[e.Suggestion=2]="Suggestion",e[e.Message=3]="Message"}(c||(c={}));var d=function(e){function DiagnosticsAdapter(t,n,r,i){var s=e.call(this,i)||this;s._libFiles=t,s._defaults=n,s._selector=r,s._disposables=[],s._listener=Object.create(null);var onModelAdd=function(e){if(e.getModeId()===r){var t,n=e.onDidChangeContent((function(){clearTimeout(t),t=setTimeout((function(){return s._doValidate(e)}),500)}));s._listener[e.uri.toString()]={dispose:function(){n.dispose(),clearTimeout(t)}},s._doValidate(e)}},onModelRemoved=function(e){o.j6.setModelMarkers(e,s._selector,[]);var t=e.uri.toString();s._listener[t]&&(s._listener[t].dispose(),delete s._listener[t])};s._disposables.push(o.j6.onDidCreateModel(onModelAdd)),s._disposables.push(o.j6.onWillDisposeModel(onModelRemoved)),s._disposables.push(o.j6.onDidChangeModelLanguage((function(e){onModelRemoved(e.model),onModelAdd(e.model)}))),s._disposables.push({dispose:function(){for(var e=0,t=o.j6.getModels();e<t.length;e++){var n=t[e];onModelRemoved(n)}}});var recomputeDiagostics=function(){for(var e=0,t=o.j6.getModels();e<t.length;e++){var n=t[e];onModelRemoved(n),onModelAdd(n)}};return s._disposables.push(s._defaults.onDidChange(recomputeDiagostics)),s._disposables.push(s._defaults.onDidExtraLibsChange(recomputeDiagostics)),o.j6.getModels().forEach(onModelAdd),s}return u(DiagnosticsAdapter,e),DiagnosticsAdapter.prototype.dispose=function(){this._disposables.forEach((function(e){return e&&e.dispose()})),this._disposables=[]},DiagnosticsAdapter.prototype._doValidate=function(e){return languageFeatures_awaiter(this,void 0,void 0,(function(){var t,n,r,i,s,a,u,c,l,p=this;return languageFeatures_generator(this,(function(d){switch(d.label){case 0:return[4,this._worker(e.uri)];case 1:return t=d.sent(),e.isDisposed()?[2]:(n=[],r=this._defaults.getDiagnosticsOptions(),i=r.noSyntaxValidation,s=r.noSemanticValidation,a=r.noSuggestionDiagnostics,i||n.push(t.getSyntacticDiagnostics(e.uri.toString())),s||n.push(t.getSemanticDiagnostics(e.uri.toString())),a||n.push(t.getSuggestionDiagnostics(e.uri.toString())),[4,Promise.all(n)]);case 2:return!(u=d.sent())||e.isDisposed()?[2]:(c=u.reduce((function(e,t){return t.concat(e)}),[]).filter((function(e){return-1===(p._defaults.getDiagnosticsOptions().diagnosticCodesToIgnore||[]).indexOf(e.code)})),l=c.map((function(e){return e.relatedInformation||[]})).reduce((function(e,t){return t.concat(e)}),[]).map((function(e){return e.file?o.Sf.parse(e.file.fileName):null})),[4,this._libFiles.fetchLibFilesIfNecessary(l)]);case 3:return d.sent(),e.isDisposed()?[2]:(o.j6.setModelMarkers(e,this._selector,c.map((function(t){return p._convertDiagnostics(e,t)}))),[2])}}))}))},DiagnosticsAdapter.prototype._convertDiagnostics=function(e,t){var n=t.start||0,r=t.length||1,i=e.getPositionAt(n),s=i.lineNumber,a=i.column,u=e.getPositionAt(n+r),c=u.lineNumber,l=u.column,p=[];return t.reportsUnnecessary&&p.push(o.eB.Unnecessary),t.reportsDeprecated&&p.push(o.eB.Deprecated),{severity:this._tsDiagnosticCategoryToMarkerSeverity(t.category),startLineNumber:s,startColumn:a,endLineNumber:c,endColumn:l,message:flattenDiagnosticMessageText(t.messageText,"\n"),code:t.code.toString(),tags:p,relatedInformation:this._convertRelatedInformation(e,t.relatedInformation)}},DiagnosticsAdapter.prototype._convertRelatedInformation=function(e,t){var n=this;if(t){var r=[];return t.forEach((function(t){var i=e;if(t.file){var s=o.Sf.parse(t.file.fileName);i=n._libFiles.getOrCreateModel(s)}if(i){var a=t.start||0,u=t.length||1,c=i.getPositionAt(a),l=c.lineNumber,p=c.column,d=i.getPositionAt(a+u),f=d.lineNumber,g=d.column;r.push({resource:i.uri,startLineNumber:l,startColumn:p,endLineNumber:f,endColumn:g,message:flattenDiagnosticMessageText(t.messageText,"\n")})}})),r}},DiagnosticsAdapter.prototype._tsDiagnosticCategoryToMarkerSeverity=function(e){switch(e){case c.Error:return o.ZL.Error;case c.Message:return o.ZL.Info;case c.Warning:return o.ZL.Warning;case c.Suggestion:return o.ZL.Hint}return o.ZL.Info},DiagnosticsAdapter}(l),f=function(e){function SuggestAdapter(){return null!==e&&e.apply(this,arguments)||this}return u(SuggestAdapter,e),Object.defineProperty(SuggestAdapter.prototype,"triggerCharacters",{get:function(){return["."]},enumerable:!1,configurable:!0}),SuggestAdapter.prototype.provideCompletionItems=function(e,t,n,r){return languageFeatures_awaiter(this,void 0,void 0,(function(){var n,r,i,s,a,u;return languageFeatures_generator(this,(function(c){switch(c.label){case 0:return n=e.getWordUntilPosition(t),r=new o.e6(t.lineNumber,n.startColumn,t.lineNumber,n.endColumn),i=e.uri,s=e.getOffsetAt(t),[4,this._worker(i)];case 1:return[4,c.sent().getCompletionsAtPosition(i.toString(),s)];case 2:return!(a=c.sent())||e.isDisposed()?[2]:(u=a.entries.map((function(n){var a,u=r;if(n.replacementSpan){var c=e.getPositionAt(n.replacementSpan.start),l=e.getPositionAt(n.replacementSpan.start+n.replacementSpan.length);u=new o.e6(c.lineNumber,c.column,l.lineNumber,l.column)}var p=[];return-1!==(null===(a=n.kindModifiers)||void 0===a?void 0:a.indexOf("deprecated"))&&p.push(o.Mj.CompletionItemTag.Deprecated),{uri:i,position:t,offset:s,range:u,label:n.name,insertText:n.name,sortText:n.sortText,kind:SuggestAdapter.convertKind(n.kind),tags:p}})),[2,{suggestions:u}])}}))}))},SuggestAdapter.prototype.resolveCompletionItem=function(e,t){return languageFeatures_awaiter(this,void 0,void 0,(function(){var t,n,r,i,o;return languageFeatures_generator(this,(function(s){switch(s.label){case 0:return n=(t=e).uri,r=t.position,i=t.offset,[4,this._worker(n)];case 1:return[4,s.sent().getCompletionEntryDetails(n.toString(),i,t.label)];case 2:return(o=s.sent())?[2,{uri:n,position:r,label:o.name,kind:SuggestAdapter.convertKind(o.kind),detail:displayPartsToString(o.displayParts),documentation:{value:SuggestAdapter.createDocumentationString(o)}}]:[2,t]}}))}))},SuggestAdapter.convertKind=function(e){switch(e){case S.primitiveType:case S.keyword:return o.Mj.CompletionItemKind.Keyword;case S.variable:case S.localVariable:return o.Mj.CompletionItemKind.Variable;case S.memberVariable:case S.memberGetAccessor:case S.memberSetAccessor:return o.Mj.CompletionItemKind.Field;case S.function:case S.memberFunction:case S.constructSignature:case S.callSignature:case S.indexSignature:return o.Mj.CompletionItemKind.Function;case S.enum:return o.Mj.CompletionItemKind.Enum;case S.module:return o.Mj.CompletionItemKind.Module;case S.class:return o.Mj.CompletionItemKind.Class;case S.interface:return o.Mj.CompletionItemKind.Interface;case S.warning:return o.Mj.CompletionItemKind.File}return o.Mj.CompletionItemKind.Property},SuggestAdapter.createDocumentationString=function(e){var t=displayPartsToString(e.documentation);if(e.tags)for(var n=0,r=e.tags;n<r.length;n++){t+="\n\n"+tagToString(r[n])}return t},SuggestAdapter}(l);function tagToString(e){var t="*@"+e.name+"*";if("param"===e.name&&e.text){var n=e.text.split(" "),r=n[0],i=n.slice(1);t+="`"+r+"`",i.length>0&&(t+=" — "+i.join(" "))}else e.text&&(t+=" — "+e.text);return t}var g=function(e){function SignatureHelpAdapter(){var t=null!==e&&e.apply(this,arguments)||this;return t.signatureHelpTriggerCharacters=["(",","],t}return u(SignatureHelpAdapter,e),SignatureHelpAdapter.prototype.provideSignatureHelp=function(e,t,n){return languageFeatures_awaiter(this,void 0,void 0,(function(){var n,r,i,o;return languageFeatures_generator(this,(function(s){switch(s.label){case 0:return n=e.uri,r=e.getOffsetAt(t),[4,this._worker(n)];case 1:return[4,s.sent().getSignatureHelpItems(n.toString(),r)];case 2:return!(i=s.sent())||e.isDisposed()?[2]:(o={activeSignature:i.selectedItemIndex,activeParameter:i.argumentIndex,signatures:[]},i.items.forEach((function(e){var t={label:"",parameters:[]};t.documentation={value:displayPartsToString(e.documentation)},t.label+=displayPartsToString(e.prefixDisplayParts),e.parameters.forEach((function(n,r,i){var o=displayPartsToString(n.displayParts),s={label:o,documentation:{value:displayPartsToString(n.documentation)}};t.label+=o,t.parameters.push(s),r<i.length-1&&(t.label+=displayPartsToString(e.separatorDisplayParts))})),t.label+=displayPartsToString(e.suffixDisplayParts),o.signatures.push(t)})),[2,{value:o,dispose:function(){}}])}}))}))},SignatureHelpAdapter}(l),h=function(e){function QuickInfoAdapter(){return null!==e&&e.apply(this,arguments)||this}return u(QuickInfoAdapter,e),QuickInfoAdapter.prototype.provideHover=function(e,t,n){return languageFeatures_awaiter(this,void 0,void 0,(function(){var n,r,i,o,s,a;return languageFeatures_generator(this,(function(u){switch(u.label){case 0:return n=e.uri,r=e.getOffsetAt(t),[4,this._worker(n)];case 1:return[4,u.sent().getQuickInfoAtPosition(n.toString(),r)];case 2:return!(i=u.sent())||e.isDisposed()?[2]:(o=displayPartsToString(i.documentation),s=i.tags?i.tags.map((function(e){return tagToString(e)})).join("  \n\n"):"",a=displayPartsToString(i.displayParts),[2,{range:this._textSpanToRange(e,i.textSpan),contents:[{value:"```typescript\n"+a+"\n```\n"},{value:o+(s?"\n\n"+s:"")}]}])}}))}))},QuickInfoAdapter}(l),m=function(e){function OccurrencesAdapter(){return null!==e&&e.apply(this,arguments)||this}return u(OccurrencesAdapter,e),OccurrencesAdapter.prototype.provideDocumentHighlights=function(e,t,n){return languageFeatures_awaiter(this,void 0,void 0,(function(){var n,r,i,s=this;return languageFeatures_generator(this,(function(a){switch(a.label){case 0:return n=e.uri,r=e.getOffsetAt(t),[4,this._worker(n)];case 1:return[4,a.sent().getOccurrencesAtPosition(n.toString(),r)];case 2:return!(i=a.sent())||e.isDisposed()?[2]:[2,i.map((function(t){return{range:s._textSpanToRange(e,t.textSpan),kind:t.isWriteAccess?o.Mj.DocumentHighlightKind.Write:o.Mj.DocumentHighlightKind.Text}}))]}}))}))},OccurrencesAdapter}(l),b=function(e){function DefinitionAdapter(t,n){var r=e.call(this,n)||this;return r._libFiles=t,r}return u(DefinitionAdapter,e),DefinitionAdapter.prototype.provideDefinition=function(e,t,n){return languageFeatures_awaiter(this,void 0,void 0,(function(){var n,r,i,s,a,u,c,l,p;return languageFeatures_generator(this,(function(d){switch(d.label){case 0:return n=e.uri,r=e.getOffsetAt(t),[4,this._worker(n)];case 1:return[4,d.sent().getDefinitionAtPosition(n.toString(),r)];case 2:return!(i=d.sent())||e.isDisposed()?[2]:[4,this._libFiles.fetchLibFilesIfNecessary(i.map((function(e){return o.Sf.parse(e.fileName)})))];case 3:if(d.sent(),e.isDisposed())return[2];for(s=[],a=0,u=i;a<u.length;a++)c=u[a],l=o.Sf.parse(c.fileName),(p=this._libFiles.getOrCreateModel(l))&&s.push({uri:l,range:this._textSpanToRange(p,c.textSpan)});return[2,s]}}))}))},DefinitionAdapter}(l),v=function(e){function ReferenceAdapter(t,n){var r=e.call(this,n)||this;return r._libFiles=t,r}return u(ReferenceAdapter,e),ReferenceAdapter.prototype.provideReferences=function(e,t,n,r){return languageFeatures_awaiter(this,void 0,void 0,(function(){var n,r,i,s,a,u,c,l,p;return languageFeatures_generator(this,(function(d){switch(d.label){case 0:return n=e.uri,r=e.getOffsetAt(t),[4,this._worker(n)];case 1:return[4,d.sent().getReferencesAtPosition(n.toString(),r)];case 2:return!(i=d.sent())||e.isDisposed()?[2]:[4,this._libFiles.fetchLibFilesIfNecessary(i.map((function(e){return o.Sf.parse(e.fileName)})))];case 3:if(d.sent(),e.isDisposed())return[2];for(s=[],a=0,u=i;a<u.length;a++)c=u[a],l=o.Sf.parse(c.fileName),(p=this._libFiles.getOrCreateModel(l))&&s.push({uri:l,range:this._textSpanToRange(p,c.textSpan)});return[2,s]}}))}))},ReferenceAdapter}(l),y=function(e){function OutlineAdapter(){return null!==e&&e.apply(this,arguments)||this}return u(OutlineAdapter,e),OutlineAdapter.prototype.provideDocumentSymbols=function(e,t){return languageFeatures_awaiter(this,void 0,void 0,(function(){var t,n,r,i,s=this;return languageFeatures_generator(this,(function(a){switch(a.label){case 0:return t=e.uri,[4,this._worker(t)];case 1:return[4,a.sent().getNavigationBarItems(t.toString())];case 2:return!(n=a.sent())||e.isDisposed()?[2]:(r=function(t,n,i){var a={name:n.text,detail:"",kind:_[n.kind]||o.Mj.SymbolKind.Variable,range:s._textSpanToRange(e,n.spans[0]),selectionRange:s._textSpanToRange(e,n.spans[0]),tags:[],containerName:i};if(n.childItems&&n.childItems.length>0)for(var u=0,c=n.childItems;u<c.length;u++){var l=c[u];r(t,l,a.name)}t.push(a)},i=[],n.forEach((function(e){return r(i,e)})),[2,i])}}))}))},OutlineAdapter}(l),S=function(){function Kind(){}return Kind.unknown="",Kind.keyword="keyword",Kind.script="script",Kind.module="module",Kind.class="class",Kind.interface="interface",Kind.type="type",Kind.enum="enum",Kind.variable="var",Kind.localVariable="local var",Kind.function="function",Kind.localFunction="local function",Kind.memberFunction="method",Kind.memberGetAccessor="getter",Kind.memberSetAccessor="setter",Kind.memberVariable="property",Kind.constructorImplementation="constructor",Kind.callSignature="call",Kind.indexSignature="index",Kind.constructSignature="construct",Kind.parameter="parameter",Kind.typeParameter="type parameter",Kind.primitiveType="primitive type",Kind.label="label",Kind.alias="alias",Kind.const="const",Kind.let="let",Kind.warning="warning",Kind}(),_=Object.create(null);_[S.module]=o.Mj.SymbolKind.Module,_[S.class]=o.Mj.SymbolKind.Class,_[S.enum]=o.Mj.SymbolKind.Enum,_[S.interface]=o.Mj.SymbolKind.Interface,_[S.memberFunction]=o.Mj.SymbolKind.Method,_[S.memberVariable]=o.Mj.SymbolKind.Property,_[S.memberGetAccessor]=o.Mj.SymbolKind.Property,_[S.memberSetAccessor]=o.Mj.SymbolKind.Property,_[S.variable]=o.Mj.SymbolKind.Variable,_[S.const]=o.Mj.SymbolKind.Variable,_[S.localVariable]=o.Mj.SymbolKind.Variable,_[S.variable]=o.Mj.SymbolKind.Variable,_[S.function]=o.Mj.SymbolKind.Function,_[S.localFunction]=o.Mj.SymbolKind.Function;var A,w,k=function(e){function FormatHelper(){return null!==e&&e.apply(this,arguments)||this}return u(FormatHelper,e),FormatHelper._convertOptions=function(e){return{ConvertTabsToSpaces:e.insertSpaces,TabSize:e.tabSize,IndentSize:e.tabSize,IndentStyle:i.Smart,NewLineCharacter:"\n",InsertSpaceAfterCommaDelimiter:!0,InsertSpaceAfterSemicolonInForStatements:!0,InsertSpaceBeforeAndAfterBinaryOperators:!0,InsertSpaceAfterKeywordsInControlFlowStatements:!0,InsertSpaceAfterFunctionKeywordForAnonymousFunctions:!0,InsertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis:!1,InsertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets:!1,InsertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces:!1,PlaceOpenBraceOnNewLineForControlBlocks:!1,PlaceOpenBraceOnNewLineForFunctions:!1}},FormatHelper.prototype._convertTextChanges=function(e,t){return{text:t.newText,range:this._textSpanToRange(e,t.span)}},FormatHelper}(l),x=function(e){function FormatAdapter(){return null!==e&&e.apply(this,arguments)||this}return u(FormatAdapter,e),FormatAdapter.prototype.provideDocumentRangeFormattingEdits=function(e,t,n,r){return languageFeatures_awaiter(this,void 0,void 0,(function(){var r,i,o,s,a=this;return languageFeatures_generator(this,(function(u){switch(u.label){case 0:return r=e.uri,i=e.getOffsetAt({lineNumber:t.startLineNumber,column:t.startColumn}),o=e.getOffsetAt({lineNumber:t.endLineNumber,column:t.endColumn}),[4,this._worker(r)];case 1:return[4,u.sent().getFormattingEditsForRange(r.toString(),i,o,k._convertOptions(n))];case 2:return!(s=u.sent())||e.isDisposed()?[2]:[2,s.map((function(t){return a._convertTextChanges(e,t)}))]}}))}))},FormatAdapter}(k),M=function(e){function FormatOnTypeAdapter(){return null!==e&&e.apply(this,arguments)||this}return u(FormatOnTypeAdapter,e),Object.defineProperty(FormatOnTypeAdapter.prototype,"autoFormatTriggerCharacters",{get:function(){return[";","}","\n"]},enumerable:!1,configurable:!0}),FormatOnTypeAdapter.prototype.provideOnTypeFormattingEdits=function(e,t,n,r,i){return languageFeatures_awaiter(this,void 0,void 0,(function(){var i,o,s,a=this;return languageFeatures_generator(this,(function(u){switch(u.label){case 0:return i=e.uri,o=e.getOffsetAt(t),[4,this._worker(i)];case 1:return[4,u.sent().getFormattingEditsAfterKeystroke(i.toString(),o,n,k._convertOptions(r))];case 2:return!(s=u.sent())||e.isDisposed()?[2]:[2,s.map((function(t){return a._convertTextChanges(e,t)}))]}}))}))},FormatOnTypeAdapter}(k),F=function(e){function CodeActionAdaptor(){return null!==e&&e.apply(this,arguments)||this}return u(CodeActionAdaptor,e),CodeActionAdaptor.prototype.provideCodeActions=function(e,t,n,r){return languageFeatures_awaiter(this,void 0,void 0,(function(){var r,i,o,s,a,u,c=this;return languageFeatures_generator(this,(function(l){switch(l.label){case 0:return r=e.uri,i=e.getOffsetAt({lineNumber:t.startLineNumber,column:t.startColumn}),o=e.getOffsetAt({lineNumber:t.endLineNumber,column:t.endColumn}),s=k._convertOptions(e.getOptions()),a=n.markers.filter((function(e){return e.code})).map((function(e){return e.code})).map(Number),[4,this._worker(r)];case 1:return[4,l.sent().getCodeFixesAtPosition(r.toString(),i,o,a,s)];case 2:return!(u=l.sent())||e.isDisposed()?[2,{actions:[],dispose:function(){}}]:[2,{actions:u.filter((function(e){return 0===e.changes.filter((function(e){return e.isNewFile})).length})).map((function(t){return c._tsCodeFixActionToMonacoCodeAction(e,n,t)})),dispose:function(){}}]}}))}))},CodeActionAdaptor.prototype._tsCodeFixActionToMonacoCodeAction=function(e,t,n){for(var r=[],i=0,o=n.changes;i<o.length;i++)for(var s=0,a=o[i].textChanges;s<a.length;s++){var u=a[s];r.push({resource:e.uri,edit:{range:this._textSpanToRange(e,u.span),text:u.newText}})}return{title:n.description,edit:{edits:r},diagnostics:t.markers,kind:"quickfix"}},CodeActionAdaptor}(k),C=function(e){function RenameAdapter(){return null!==e&&e.apply(this,arguments)||this}return u(RenameAdapter,e),RenameAdapter.prototype.provideRenameEdits=function(e,t,n,r){return languageFeatures_awaiter(this,void 0,void 0,(function(){var r,i,s,a,u,c,l,p,d,f;return languageFeatures_generator(this,(function(g){switch(g.label){case 0:return r=e.uri,i=r.toString(),s=e.getOffsetAt(t),[4,this._worker(r)];case 1:return[4,(a=g.sent()).getRenameInfo(i,s,{allowRenameOfImportPath:!1})];case 2:if(!1===(u=g.sent()).canRename)return[2,{edits:[],rejectReason:u.localizedErrorMessage}];if(void 0!==u.fileToRename)throw new Error("Renaming files is not supported.");return[4,a.findRenameLocations(i,s,!1,!1,!1)];case 3:if(!(c=g.sent())||e.isDisposed())return[2];for(l=[],p=0,d=c;p<d.length;p++)f=d[p],l.push({resource:o.Sf.parse(f.fileName),edit:{range:this._textSpanToRange(e,f.textSpan),text:n}});return[2,{edits:l}]}}))}))},RenameAdapter}(l);function setupTypeScript(e){w=setupMode(e,"typescript")}function setupJavaScript(e){A=setupMode(e,"javascript")}function getJavaScriptWorker(){return new Promise((function(e,t){if(!A)return t("JavaScript not registered!");e(A)}))}function getTypeScriptWorker(){return new Promise((function(e,t){if(!w)return t("TypeScript not registered!");e(w)}))}function setupMode(e,t){var n=new s(t,e),worker=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return n.getLanguageServiceWorker.apply(n,e)},r=new p(worker);return o.Mj.registerCompletionItemProvider(t,new f(worker)),o.Mj.registerSignatureHelpProvider(t,new g(worker)),o.Mj.registerHoverProvider(t,new h(worker)),o.Mj.registerDocumentHighlightProvider(t,new m(worker)),o.Mj.registerDefinitionProvider(t,new b(r,worker)),o.Mj.registerReferenceProvider(t,new v(r,worker)),o.Mj.registerDocumentSymbolProvider(t,new y(worker)),o.Mj.registerDocumentRangeFormattingEditProvider(t,new x(worker)),o.Mj.registerOnTypeFormattingEditProvider(t,new M(worker)),o.Mj.registerCodeActionProvider(t,new F(worker)),o.Mj.registerRenameProvider(t,new C(worker)),new d(r,e,t,worker),worker}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,