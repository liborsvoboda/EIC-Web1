"use strict";(self.webpackChunkwiql_editor=self.webpackChunkwiql_editor||[]).push([[7194],{97194:(e,t,r)=>{r.r(t),r.d(t,{setupMode:()=>setupMode});var n,i=r(61174),o=function(){function WorkerManager(e){var t=this;this._defaults=e,this._worker=null,this._idleCheckInterval=setInterval((function(){return t._checkIfIdle()}),3e4),this._lastUsedTime=0,this._configChangeListener=this._defaults.onDidChange((function(){return t._stopWorker()}))}return WorkerManager.prototype._stopWorker=function(){this._worker&&(this._worker.dispose(),this._worker=null),this._client=null},WorkerManager.prototype.dispose=function(){clearInterval(this._idleCheckInterval),this._configChangeListener.dispose(),this._stopWorker()},WorkerManager.prototype._checkIfIdle=function(){this._worker&&(Date.now()-this._lastUsedTime>12e4&&this._stopWorker())},WorkerManager.prototype._getClient=function(){return this._lastUsedTime=Date.now(),this._client||(this._worker=i.j6.createWebWorker({moduleId:"vs/language/json/jsonWorker",label:this._defaults.languageId,createData:{languageSettings:this._defaults.diagnosticsOptions,languageId:this._defaults.languageId,enableSchemaRequest:this._defaults.diagnosticsOptions.enableSchemaRequest}}),this._client=this._worker.getProxy()),this._client},WorkerManager.prototype.getLanguageServiceWorker=function(){for(var e,t=this,r=[],n=0;n<arguments.length;n++)r[n]=arguments[n];return this._getClient().then((function(t){e=t})).then((function(e){return t._worker.withSyncedResources(r)})).then((function(t){return e}))},WorkerManager}();function scanner_createScanner(e,t){void 0===t&&(t=!1);var r=e.length,n=0,i="",o=0,a=16,s=0,c=0,u=0,l=0,f=0;function scanHexDigits(t,r){for(var i=0,o=0;i<t||!r;){var a=e.charCodeAt(n);if(a>=48&&a<=57)o=16*o+a-48;else if(a>=65&&a<=70)o=16*o+a-65+10;else{if(!(a>=97&&a<=102))break;o=16*o+a-97+10}n++,i++}return i<t&&(o=-1),o}function scanNext(){if(i="",f=0,o=n,c=s,l=u,n>=r)return o=r,a=17;var t=e.charCodeAt(n);if(isWhiteSpace(t)){do{n++,i+=String.fromCharCode(t),t=e.charCodeAt(n)}while(isWhiteSpace(t));return a=15}if(isLineBreak(t))return n++,i+=String.fromCharCode(t),13===t&&10===e.charCodeAt(n)&&(n++,i+="\n"),s++,u=n,a=14;switch(t){case 123:return n++,a=1;case 125:return n++,a=2;case 91:return n++,a=3;case 93:return n++,a=4;case 58:return n++,a=6;case 44:return n++,a=5;case 34:return n++,i=function scanString(){for(var t="",i=n;;){if(n>=r){t+=e.substring(i,n),f=2;break}var o=e.charCodeAt(n);if(34===o){t+=e.substring(i,n),n++;break}if(92!==o){if(o>=0&&o<=31){if(isLineBreak(o)){t+=e.substring(i,n),f=2;break}f=6}n++}else{if(t+=e.substring(i,n),++n>=r){f=2;break}switch(e.charCodeAt(n++)){case 34:t+='"';break;case 92:t+="\\";break;case 47:t+="/";break;case 98:t+="\b";break;case 102:t+="\f";break;case 110:t+="\n";break;case 114:t+="\r";break;case 116:t+="\t";break;case 117:var a=scanHexDigits(4,!0);a>=0?t+=String.fromCharCode(a):f=4;break;default:f=5}i=n}}return t}(),a=10;case 47:var h=n-1;if(47===e.charCodeAt(n+1)){for(n+=2;n<r&&!isLineBreak(e.charCodeAt(n));)n++;return i=e.substring(h,n),a=12}if(42===e.charCodeAt(n+1)){n+=2;for(var p=r-1,m=!1;n<p;){var d=e.charCodeAt(n);if(42===d&&47===e.charCodeAt(n+1)){n+=2,m=!0;break}n++,isLineBreak(d)&&(13===d&&10===e.charCodeAt(n)&&n++,s++,u=n)}return m||(n++,f=1),i=e.substring(h,n),a=13}return i+=String.fromCharCode(t),n++,a=16;case 45:if(i+=String.fromCharCode(t),++n===r||!isDigit(e.charCodeAt(n)))return a=16;case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:return i+=function scanNumber(){var t=n;if(48===e.charCodeAt(n))n++;else for(n++;n<e.length&&isDigit(e.charCodeAt(n));)n++;if(n<e.length&&46===e.charCodeAt(n)){if(!(++n<e.length&&isDigit(e.charCodeAt(n))))return f=3,e.substring(t,n);for(n++;n<e.length&&isDigit(e.charCodeAt(n));)n++}var r=n;if(n<e.length&&(69===e.charCodeAt(n)||101===e.charCodeAt(n)))if((++n<e.length&&43===e.charCodeAt(n)||45===e.charCodeAt(n))&&n++,n<e.length&&isDigit(e.charCodeAt(n))){for(n++;n<e.length&&isDigit(e.charCodeAt(n));)n++;r=n}else f=3;return e.substring(t,r)}(),a=11;default:for(;n<r&&isUnknownContentCharacter(t);)n++,t=e.charCodeAt(n);if(o!==n){switch(i=e.substring(o,n)){case"true":return a=8;case"false":return a=9;case"null":return a=7}return a=16}return i+=String.fromCharCode(t),n++,a=16}}function isUnknownContentCharacter(e){if(isWhiteSpace(e)||isLineBreak(e))return!1;switch(e){case 125:case 93:case 123:case 91:case 34:case 58:case 44:case 47:return!1}return!0}return{setPosition:function setPosition(e){n=e,i="",o=0,a=16,f=0},getPosition:function(){return n},scan:t?function scanNextNonTrivia(){var e;do{e=scanNext()}while(e>=12&&e<=15);return e}:scanNext,getToken:function(){return a},getTokenValue:function(){return i},getTokenOffset:function(){return o},getTokenLength:function(){return n-o},getTokenStartLine:function(){return c},getTokenStartCharacter:function(){return o-l},getTokenError:function(){return f}}}function isWhiteSpace(e){return 32===e||9===e||11===e||12===e||160===e||5760===e||e>=8192&&e<=8203||8239===e||8287===e||12288===e||65279===e}function isLineBreak(e){return 10===e||13===e||8232===e||8233===e}function isDigit(e){return e>=48&&e<=57}function visit(e,t,r){void 0===r&&(r=n.DEFAULT);var i=scanner_createScanner(e,!1);function toNoArgVisit(e){return e?function(){return e(i.getTokenOffset(),i.getTokenLength(),i.getTokenStartLine(),i.getTokenStartCharacter())}:function(){return!0}}function toOneArgVisit(e){return e?function(t){return e(t,i.getTokenOffset(),i.getTokenLength(),i.getTokenStartLine(),i.getTokenStartCharacter())}:function(){return!0}}var o=toNoArgVisit(t.onObjectBegin),a=toOneArgVisit(t.onObjectProperty),s=toNoArgVisit(t.onObjectEnd),c=toNoArgVisit(t.onArrayBegin),u=toNoArgVisit(t.onArrayEnd),l=toOneArgVisit(t.onLiteralValue),f=toOneArgVisit(t.onSeparator),h=toNoArgVisit(t.onComment),p=toOneArgVisit(t.onError),m=r&&r.disallowComments,d=r&&r.allowTrailingComma;function scanNext(){for(;;){var e=i.scan();switch(i.getTokenError()){case 4:handleError(14);break;case 5:handleError(15);break;case 3:handleError(13);break;case 1:m||handleError(11);break;case 2:handleError(12);break;case 6:handleError(16)}switch(e){case 12:case 13:m?handleError(10):h();break;case 16:handleError(1);break;case 15:case 14:break;default:return e}}}function handleError(e,t,r){if(void 0===t&&(t=[]),void 0===r&&(r=[]),p(e),t.length+r.length>0)for(var n=i.getToken();17!==n;){if(-1!==t.indexOf(n)){scanNext();break}if(-1!==r.indexOf(n))break;n=scanNext()}}function parseString(e){var t=i.getTokenValue();return e?l(t):a(t),scanNext(),!0}function parseValue(){switch(i.getToken()){case 3:return function parseArray(){c(),scanNext();for(var e=!1;4!==i.getToken()&&17!==i.getToken();){if(5===i.getToken()){if(e||handleError(4,[],[]),f(","),scanNext(),4===i.getToken()&&d)break}else e&&handleError(6,[],[]);parseValue()||handleError(4,[],[4,5]),e=!0}return u(),4!==i.getToken()?handleError(8,[4],[]):scanNext(),!0}();case 1:return function parseObject(){o(),scanNext();for(var e=!1;2!==i.getToken()&&17!==i.getToken();){if(5===i.getToken()){if(e||handleError(4,[],[]),f(","),scanNext(),2===i.getToken()&&d)break}else e&&handleError(6,[],[]);(10!==i.getToken()?(handleError(3,[],[2,5]),0):(parseString(!1),6===i.getToken()?(f(":"),scanNext(),parseValue()||handleError(4,[],[2,5])):handleError(5,[],[2,5]),1))||handleError(4,[],[2,5]),e=!0}return s(),2!==i.getToken()?handleError(7,[2],[]):scanNext(),!0}();case 10:return parseString(!0);default:return function parseLiteral(){switch(i.getToken()){case 11:var e=0;try{"number"!=typeof(e=JSON.parse(i.getTokenValue()))&&(handleError(2),e=0)}catch(e){handleError(2)}l(e);break;case 7:l(null);break;case 8:l(!0);break;case 9:l(!1);break;default:return!1}return scanNext(),!0}()}}return scanNext(),17===i.getToken()?!!r.allowEmptyContent||(handleError(4,[],[]),!1):parseValue()?(17!==i.getToken()&&handleError(9,[],[]),!0):(handleError(4,[],[]),!1)}!function(e){e.DEFAULT={allowTrailingComma:!1}}(n||(n={}));var a,s,c,u,l,f,h,p,m,d,g,v,y,b,S,x,C,k,A,O,N=scanner_createScanner,T=function parse(e,t,r){void 0===t&&(t=[]),void 0===r&&(r=n.DEFAULT);var i=null,o=[],a=[];function onValue(e){Array.isArray(o)?o.push(e):null!==i&&(o[i]=e)}return visit(e,{onObjectBegin:function(){var e={};onValue(e),a.push(o),o=e,i=null},onObjectProperty:function(e){i=e},onObjectEnd:function(){o=a.pop()},onArrayBegin:function(){var e=[];onValue(e),a.push(o),o=e,i=null},onArrayEnd:function(){o=a.pop()},onLiteralValue:onValue,onError:function(e,r,n){t.push({error:e,offset:r,length:n})}},r),o[0]},w=function findNodeAtOffset(e,t,r){if(void 0===r&&(r=!1),function contains(e,t,r){return void 0===r&&(r=!1),t>=e.offset&&t<e.offset+e.length||r&&t===e.offset+e.length}(e,t,r)){var n=e.children;if(Array.isArray(n))for(var i=0;i<n.length&&n[i].offset<=t;i++){var o=findNodeAtOffset(n[i],t,r);if(o)return o}return e}},I=function getNodePath(e){if(!e.parent||!e.parent.children)return[];var t=getNodePath(e.parent);if("property"===e.parent.type){var r=e.parent.children[0].value;t.push(r)}else if("array"===e.parent.type){var n=e.parent.children.indexOf(e);-1!==n&&t.push(n)}return t},E=function getNodeValue(e){switch(e.type){case"array":return e.children.map(getNodeValue);case"object":for(var t=Object.create(null),r=0,n=e.children;r<n.length;r++){var i=n[r],o=i.children[1];o&&(t[i.children[0].value]=getNodeValue(o))}return t;case"null":case"string":case"number":case"boolean":return e.value;default:return}};function equals(e,t){if(e===t)return!0;if(null==e||null==t)return!1;if(typeof e!=typeof t)return!1;if("object"!=typeof e)return!1;if(Array.isArray(e)!==Array.isArray(t))return!1;var r,n;if(Array.isArray(e)){if(e.length!==t.length)return!1;for(r=0;r<e.length;r++)if(!equals(e[r],t[r]))return!1}else{var i=[];for(n in e)i.push(n);i.sort();var o=[];for(n in t)o.push(n);if(o.sort(),!equals(i,o))return!1;for(r=0;r<i.length;r++)if(!equals(e[i[r]],t[i[r]]))return!1}return!0}function objects_isNumber(e){return"number"==typeof e}function isDefined(e){return void 0!==e}function isBoolean(e){return"boolean"==typeof e}!function(e){e.create=function create(e,t){return{line:e,character:t}},e.is=function is(e){var t=e;return ae.objectLiteral(t)&&ae.number(t.line)&&ae.number(t.character)}}(a||(a={})),function(e){e.create=function create(e,t,r,n){if(ae.number(e)&&ae.number(t)&&ae.number(r)&&ae.number(n))return{start:a.create(e,t),end:a.create(r,n)};if(a.is(e)&&a.is(t))return{start:e,end:t};throw new Error("Range#create called with invalid arguments["+e+", "+t+", "+r+", "+n+"]")},e.is=function is(e){var t=e;return ae.objectLiteral(t)&&a.is(t.start)&&a.is(t.end)}}(s||(s={})),function(e){e.create=function create(e,t){return{uri:e,range:t}},e.is=function is(e){var t=e;return ae.defined(t)&&s.is(t.range)&&(ae.string(t.uri)||ae.undefined(t.uri))}}(c||(c={})),function(e){e.create=function create(e,t,r,n){return{targetUri:e,targetRange:t,targetSelectionRange:r,originSelectionRange:n}},e.is=function is(e){var t=e;return ae.defined(t)&&s.is(t.targetRange)&&ae.string(t.targetUri)&&(s.is(t.targetSelectionRange)||ae.undefined(t.targetSelectionRange))&&(s.is(t.originSelectionRange)||ae.undefined(t.originSelectionRange))}}(u||(u={})),function(e){e.create=function create(e,t,r,n){return{red:e,green:t,blue:r,alpha:n}},e.is=function is(e){var t=e;return ae.number(t.red)&&ae.number(t.green)&&ae.number(t.blue)&&ae.number(t.alpha)}}(l||(l={})),function(e){e.create=function create(e,t){return{range:e,color:t}},e.is=function is(e){var t=e;return s.is(t.range)&&l.is(t.color)}}(f||(f={})),function(e){e.create=function create(e,t,r){return{label:e,textEdit:t,additionalTextEdits:r}},e.is=function is(e){var t=e;return ae.string(t.label)&&(ae.undefined(t.textEdit)||S.is(t))&&(ae.undefined(t.additionalTextEdits)||ae.typedArray(t.additionalTextEdits,S.is))}}(h||(h={})),function(e){e.Comment="comment",e.Imports="imports",e.Region="region"}(p||(p={})),function(e){e.create=function create(e,t,r,n,i){var o={startLine:e,endLine:t};return ae.defined(r)&&(o.startCharacter=r),ae.defined(n)&&(o.endCharacter=n),ae.defined(i)&&(o.kind=i),o},e.is=function is(e){var t=e;return ae.number(t.startLine)&&ae.number(t.startLine)&&(ae.undefined(t.startCharacter)||ae.number(t.startCharacter))&&(ae.undefined(t.endCharacter)||ae.number(t.endCharacter))&&(ae.undefined(t.kind)||ae.string(t.kind))}}(m||(m={})),function(e){e.create=function create(e,t){return{location:e,message:t}},e.is=function is(e){var t=e;return ae.defined(t)&&c.is(t.location)&&ae.string(t.message)}}(d||(d={})),function(e){e.Error=1,e.Warning=2,e.Information=3,e.Hint=4}(g||(g={})),function(e){e.Unnecessary=1,e.Deprecated=2}(v||(v={})),function(e){e.create=function create(e,t,r,n,i,o){var a={range:e,message:t};return ae.defined(r)&&(a.severity=r),ae.defined(n)&&(a.code=n),ae.defined(i)&&(a.source=i),ae.defined(o)&&(a.relatedInformation=o),a},e.is=function is(e){var t=e;return ae.defined(t)&&s.is(t.range)&&ae.string(t.message)&&(ae.number(t.severity)||ae.undefined(t.severity))&&(ae.number(t.code)||ae.string(t.code)||ae.undefined(t.code))&&(ae.string(t.source)||ae.undefined(t.source))&&(ae.undefined(t.relatedInformation)||ae.typedArray(t.relatedInformation,d.is))}}(y||(y={})),function(e){e.create=function create(e,t){for(var r=[],n=2;n<arguments.length;n++)r[n-2]=arguments[n];var i={title:e,command:t};return ae.defined(r)&&r.length>0&&(i.arguments=r),i},e.is=function is(e){var t=e;return ae.defined(t)&&ae.string(t.title)&&ae.string(t.command)}}(b||(b={})),function(e){e.replace=function replace(e,t){return{range:e,newText:t}},e.insert=function insert(e,t){return{range:{start:e,end:e},newText:t}},e.del=function del(e){return{range:e,newText:""}},e.is=function is(e){var t=e;return ae.objectLiteral(t)&&ae.string(t.newText)&&s.is(t.range)}}(S||(S={})),function(e){e.create=function create(e,t){return{textDocument:e,edits:t}},e.is=function is(e){var t=e;return ae.defined(t)&&P.is(t.textDocument)&&Array.isArray(t.edits)}}(x||(x={})),function(e){e.create=function create(e,t){var r={kind:"create",uri:e};return void 0===t||void 0===t.overwrite&&void 0===t.ignoreIfExists||(r.options=t),r},e.is=function is(e){var t=e;return t&&"create"===t.kind&&ae.string(t.uri)&&(void 0===t.options||(void 0===t.options.overwrite||ae.boolean(t.options.overwrite))&&(void 0===t.options.ignoreIfExists||ae.boolean(t.options.ignoreIfExists)))}}(C||(C={})),function(e){e.create=function create(e,t,r){var n={kind:"rename",oldUri:e,newUri:t};return void 0===r||void 0===r.overwrite&&void 0===r.ignoreIfExists||(n.options=r),n},e.is=function is(e){var t=e;return t&&"rename"===t.kind&&ae.string(t.oldUri)&&ae.string(t.newUri)&&(void 0===t.options||(void 0===t.options.overwrite||ae.boolean(t.options.overwrite))&&(void 0===t.options.ignoreIfExists||ae.boolean(t.options.ignoreIfExists)))}}(k||(k={})),function(e){e.create=function create(e,t){var r={kind:"delete",uri:e};return void 0===t||void 0===t.recursive&&void 0===t.ignoreIfNotExists||(r.options=t),r},e.is=function is(e){var t=e;return t&&"delete"===t.kind&&ae.string(t.uri)&&(void 0===t.options||(void 0===t.options.recursive||ae.boolean(t.options.recursive))&&(void 0===t.options.ignoreIfNotExists||ae.boolean(t.options.ignoreIfNotExists)))}}(A||(A={})),function(e){e.is=function is(e){var t=e;return t&&(void 0!==t.changes||void 0!==t.documentChanges)&&(void 0===t.documentChanges||t.documentChanges.every((function(e){return ae.string(e.kind)?C.is(e)||k.is(e)||A.is(e):x.is(e)})))}}(O||(O={}));var j,P,_,M,D,F,R,V,L,W,$,J,U,q,B,H,K,z,G,Z,X,Q,Y,ee,te,re,ne,ie=function(){function TextEditChangeImpl(e){this.edits=e}return TextEditChangeImpl.prototype.insert=function(e,t){this.edits.push(S.insert(e,t))},TextEditChangeImpl.prototype.replace=function(e,t){this.edits.push(S.replace(e,t))},TextEditChangeImpl.prototype.delete=function(e){this.edits.push(S.del(e))},TextEditChangeImpl.prototype.add=function(e){this.edits.push(e)},TextEditChangeImpl.prototype.all=function(){return this.edits},TextEditChangeImpl.prototype.clear=function(){this.edits.splice(0,this.edits.length)},TextEditChangeImpl}();!function(){function WorkspaceChange(e){var t=this;this._textEditChanges=Object.create(null),e&&(this._workspaceEdit=e,e.documentChanges?e.documentChanges.forEach((function(e){if(x.is(e)){var r=new ie(e.edits);t._textEditChanges[e.textDocument.uri]=r}})):e.changes&&Object.keys(e.changes).forEach((function(r){var n=new ie(e.changes[r]);t._textEditChanges[r]=n})))}Object.defineProperty(WorkspaceChange.prototype,"edit",{get:function(){return this._workspaceEdit},enumerable:!0,configurable:!0}),WorkspaceChange.prototype.getTextEditChange=function(e){if(P.is(e)){if(this._workspaceEdit||(this._workspaceEdit={documentChanges:[]}),!this._workspaceEdit.documentChanges)throw new Error("Workspace edit is not configured for document changes.");var t=e;if(!(n=this._textEditChanges[t.uri])){var r={textDocument:t,edits:i=[]};this._workspaceEdit.documentChanges.push(r),n=new ie(i),this._textEditChanges[t.uri]=n}return n}if(this._workspaceEdit||(this._workspaceEdit={changes:Object.create(null)}),!this._workspaceEdit.changes)throw new Error("Workspace edit is not configured for normal text edit changes.");var n;if(!(n=this._textEditChanges[e])){var i=[];this._workspaceEdit.changes[e]=i,n=new ie(i),this._textEditChanges[e]=n}return n},WorkspaceChange.prototype.createFile=function(e,t){this.checkDocumentChanges(),this._workspaceEdit.documentChanges.push(C.create(e,t))},WorkspaceChange.prototype.renameFile=function(e,t,r){this.checkDocumentChanges(),this._workspaceEdit.documentChanges.push(k.create(e,t,r))},WorkspaceChange.prototype.deleteFile=function(e,t){this.checkDocumentChanges(),this._workspaceEdit.documentChanges.push(A.create(e,t))},WorkspaceChange.prototype.checkDocumentChanges=function(){if(!this._workspaceEdit||!this._workspaceEdit.documentChanges)throw new Error("Workspace edit is not configured for document changes.")}}();!function(e){e.create=function create(e){return{uri:e}},e.is=function is(e){var t=e;return ae.defined(t)&&ae.string(t.uri)}}(j||(j={})),function(e){e.create=function create(e,t){return{uri:e,version:t}},e.is=function is(e){var t=e;return ae.defined(t)&&ae.string(t.uri)&&(null===t.version||ae.number(t.version))}}(P||(P={})),function(e){e.create=function create(e,t,r,n){return{uri:e,languageId:t,version:r,text:n}},e.is=function is(e){var t=e;return ae.defined(t)&&ae.string(t.uri)&&ae.string(t.languageId)&&ae.number(t.version)&&ae.string(t.text)}}(_||(_={})),function(e){e.PlainText="plaintext",e.Markdown="markdown"}(M||(M={})),function(e){e.is=function is(t){var r=t;return r===e.PlainText||r===e.Markdown}}(M||(M={})),function(e){e.is=function is(e){var t=e;return ae.objectLiteral(e)&&M.is(t.kind)&&ae.string(t.value)}}(D||(D={})),function(e){e.Text=1,e.Method=2,e.Function=3,e.Constructor=4,e.Field=5,e.Variable=6,e.Class=7,e.Interface=8,e.Module=9,e.Property=10,e.Unit=11,e.Value=12,e.Enum=13,e.Keyword=14,e.Snippet=15,e.Color=16,e.File=17,e.Reference=18,e.Folder=19,e.EnumMember=20,e.Constant=21,e.Struct=22,e.Event=23,e.Operator=24,e.TypeParameter=25}(F||(F={})),function(e){e.PlainText=1,e.Snippet=2}(R||(R={})),function(e){e.Deprecated=1}(V||(V={})),function(e){e.create=function create(e){return{label:e}}}(L||(L={})),function(e){e.create=function create(e,t){return{items:e||[],isIncomplete:!!t}}}(W||(W={})),function(e){e.fromPlainText=function fromPlainText(e){return e.replace(/[\\`*_{}[\]()#+\-.!]/g,"\\$&")},e.is=function is(e){var t=e;return ae.string(t)||ae.objectLiteral(t)&&ae.string(t.language)&&ae.string(t.value)}}($||($={})),function(e){e.is=function is(e){var t=e;return!!t&&ae.objectLiteral(t)&&(D.is(t.contents)||$.is(t.contents)||ae.typedArray(t.contents,$.is))&&(void 0===e.range||s.is(e.range))}}(J||(J={})),function(e){e.create=function create(e,t){return t?{label:e,documentation:t}:{label:e}}}(U||(U={})),function(e){e.create=function create(e,t){for(var r=[],n=2;n<arguments.length;n++)r[n-2]=arguments[n];var i={label:e};return ae.defined(t)&&(i.documentation=t),ae.defined(r)?i.parameters=r:i.parameters=[],i}}(q||(q={})),function(e){e.Text=1,e.Read=2,e.Write=3}(B||(B={})),function(e){e.create=function create(e,t){var r={range:e};return ae.number(t)&&(r.kind=t),r}}(H||(H={})),function(e){e.File=1,e.Module=2,e.Namespace=3,e.Package=4,e.Class=5,e.Method=6,e.Property=7,e.Field=8,e.Constructor=9,e.Enum=10,e.Interface=11,e.Function=12,e.Variable=13,e.Constant=14,e.String=15,e.Number=16,e.Boolean=17,e.Array=18,e.Object=19,e.Key=20,e.Null=21,e.EnumMember=22,e.Struct=23,e.Event=24,e.Operator=25,e.TypeParameter=26}(K||(K={})),function(e){e.Deprecated=1}(z||(z={})),function(e){e.create=function create(e,t,r,n,i){var o={name:e,kind:t,location:{uri:n,range:r}};return i&&(o.containerName=i),o}}(G||(G={})),function(e){e.create=function create(e,t,r,n,i,o){var a={name:e,detail:t,kind:r,range:n,selectionRange:i};return void 0!==o&&(a.children=o),a},e.is=function is(e){var t=e;return t&&ae.string(t.name)&&ae.number(t.kind)&&s.is(t.range)&&s.is(t.selectionRange)&&(void 0===t.detail||ae.string(t.detail))&&(void 0===t.deprecated||ae.boolean(t.deprecated))&&(void 0===t.children||Array.isArray(t.children))}}(Z||(Z={})),function(e){e.Empty="",e.QuickFix="quickfix",e.Refactor="refactor",e.RefactorExtract="refactor.extract",e.RefactorInline="refactor.inline",e.RefactorRewrite="refactor.rewrite",e.Source="source",e.SourceOrganizeImports="source.organizeImports",e.SourceFixAll="source.fixAll"}(X||(X={})),function(e){e.create=function create(e,t){var r={diagnostics:e};return null!=t&&(r.only=t),r},e.is=function is(e){var t=e;return ae.defined(t)&&ae.typedArray(t.diagnostics,y.is)&&(void 0===t.only||ae.typedArray(t.only,ae.string))}}(Q||(Q={})),function(e){e.create=function create(e,t,r){var n={title:e};return b.is(t)?n.command=t:n.edit=t,void 0!==r&&(n.kind=r),n},e.is=function is(e){var t=e;return t&&ae.string(t.title)&&(void 0===t.diagnostics||ae.typedArray(t.diagnostics,y.is))&&(void 0===t.kind||ae.string(t.kind))&&(void 0!==t.edit||void 0!==t.command)&&(void 0===t.command||b.is(t.command))&&(void 0===t.isPreferred||ae.boolean(t.isPreferred))&&(void 0===t.edit||O.is(t.edit))}}(Y||(Y={})),function(e){e.create=function create(e,t){var r={range:e};return ae.defined(t)&&(r.data=t),r},e.is=function is(e){var t=e;return ae.defined(t)&&s.is(t.range)&&(ae.undefined(t.command)||b.is(t.command))}}(ee||(ee={})),function(e){e.create=function create(e,t){return{tabSize:e,insertSpaces:t}},e.is=function is(e){var t=e;return ae.defined(t)&&ae.number(t.tabSize)&&ae.boolean(t.insertSpaces)}}(te||(te={})),function(e){e.create=function create(e,t,r){return{range:e,target:t,data:r}},e.is=function is(e){var t=e;return ae.defined(t)&&s.is(t.range)&&(ae.undefined(t.target)||ae.string(t.target))}}(re||(re={})),function(e){e.create=function create(e,t){return{range:e,parent:t}},e.is=function is(t){var r=t;return void 0!==r&&s.is(r.range)&&(void 0===r.parent||e.is(r.parent))}}(ne||(ne={}));var oe;!function(e){function mergeSort(e,t){if(e.length<=1)return e;var r=e.length/2|0,n=e.slice(0,r),i=e.slice(r);mergeSort(n,t),mergeSort(i,t);for(var o=0,a=0,s=0;o<n.length&&a<i.length;){var c=t(n[o],i[a]);e[s++]=c<=0?n[o++]:i[a++]}for(;o<n.length;)e[s++]=n[o++];for(;a<i.length;)e[s++]=i[a++];return e}e.create=function create(e,t,r,n){return new se(e,t,r,n)},e.is=function is(e){var t=e;return!!(ae.defined(t)&&ae.string(t.uri)&&(ae.undefined(t.languageId)||ae.string(t.languageId))&&ae.number(t.lineCount)&&ae.func(t.getText)&&ae.func(t.positionAt)&&ae.func(t.offsetAt))},e.applyEdits=function applyEdits(e,t){for(var r=e.getText(),n=mergeSort(t,(function(e,t){var r=e.range.start.line-t.range.start.line;return 0===r?e.range.start.character-t.range.start.character:r})),i=r.length,o=n.length-1;o>=0;o--){var a=n[o],s=e.offsetAt(a.range.start),c=e.offsetAt(a.range.end);if(!(c<=i))throw new Error("Overlapping edit");r=r.substring(0,s)+a.newText+r.substring(c,r.length),i=s}return r}}(oe||(oe={}));var ae,se=function(){function FullTextDocument(e,t,r,n){this._uri=e,this._languageId=t,this._version=r,this._content=n,this._lineOffsets=void 0}return Object.defineProperty(FullTextDocument.prototype,"uri",{get:function(){return this._uri},enumerable:!0,configurable:!0}),Object.defineProperty(FullTextDocument.prototype,"languageId",{get:function(){return this._languageId},enumerable:!0,configurable:!0}),Object.defineProperty(FullTextDocument.prototype,"version",{get:function(){return this._version},enumerable:!0,configurable:!0}),FullTextDocument.prototype.getText=function(e){if(e){var t=this.offsetAt(e.start),r=this.offsetAt(e.end);return this._content.substring(t,r)}return this._content},FullTextDocument.prototype.update=function(e,t){this._content=e.text,this._version=t,this._lineOffsets=void 0},FullTextDocument.prototype.getLineOffsets=function(){if(void 0===this._lineOffsets){for(var e=[],t=this._content,r=!0,n=0;n<t.length;n++){r&&(e.push(n),r=!1);var i=t.charAt(n);r="\r"===i||"\n"===i,"\r"===i&&n+1<t.length&&"\n"===t.charAt(n+1)&&n++}r&&t.length>0&&e.push(t.length),this._lineOffsets=e}return this._lineOffsets},FullTextDocument.prototype.positionAt=function(e){e=Math.max(Math.min(e,this._content.length),0);var t=this.getLineOffsets(),r=0,n=t.length;if(0===n)return a.create(0,e);for(;r<n;){var i=Math.floor((r+n)/2);t[i]>e?n=i:r=i+1}var o=r-1;return a.create(o,e-t[o])},FullTextDocument.prototype.offsetAt=function(e){var t=this.getLineOffsets();if(e.line>=t.length)return this._content.length;if(e.line<0)return 0;var r=t[e.line],n=e.line+1<t.length?t[e.line+1]:this._content.length;return Math.max(Math.min(r+e.character,n),r)},Object.defineProperty(FullTextDocument.prototype,"lineCount",{get:function(){return this.getLineOffsets().length},enumerable:!0,configurable:!0}),FullTextDocument}();!function(e){var t=Object.prototype.toString;e.defined=function defined(e){return void 0!==e},e.undefined=function undefined(e){return void 0===e},e.boolean=function boolean(e){return!0===e||!1===e},e.string=function string(e){return"[object String]"===t.call(e)},e.number=function number(e){return"[object Number]"===t.call(e)},e.func=function func(e){return"[object Function]"===t.call(e)},e.objectLiteral=function objectLiteral(e){return null!==e&&"object"==typeof e},e.typedArray=function typedArray(e,t){return Array.isArray(e)&&e.every(t)}}(ae||(ae={}));var ce,ue,le,fe=function(){function FullTextDocument(e,t,r,n){this._uri=e,this._languageId=t,this._version=r,this._content=n,this._lineOffsets=void 0}return Object.defineProperty(FullTextDocument.prototype,"uri",{get:function(){return this._uri},enumerable:!0,configurable:!0}),Object.defineProperty(FullTextDocument.prototype,"languageId",{get:function(){return this._languageId},enumerable:!0,configurable:!0}),Object.defineProperty(FullTextDocument.prototype,"version",{get:function(){return this._version},enumerable:!0,configurable:!0}),FullTextDocument.prototype.getText=function(e){if(e){var t=this.offsetAt(e.start),r=this.offsetAt(e.end);return this._content.substring(t,r)}return this._content},FullTextDocument.prototype.update=function(e,t){for(var r=0,n=e;r<n.length;r++){var i=n[r];if(FullTextDocument.isIncremental(i)){var o=getWellformedRange(i.range),a=this.offsetAt(o.start),s=this.offsetAt(o.end);this._content=this._content.substring(0,a)+i.text+this._content.substring(s,this._content.length);var c=Math.max(o.start.line,0),u=Math.max(o.end.line,0),l=this._lineOffsets,f=computeLineOffsets(i.text,!1,a);if(u-c===f.length)for(var h=0,p=f.length;h<p;h++)l[h+c+1]=f[h];else f.length<1e4?l.splice.apply(l,[c+1,u-c].concat(f)):this._lineOffsets=l=l.slice(0,c+1).concat(f,l.slice(u+1));var m=i.text.length-(s-a);if(0!==m)for(h=c+1+f.length,p=l.length;h<p;h++)l[h]=l[h]+m}else{if(!FullTextDocument.isFull(i))throw new Error("Unknown change event received");this._content=i.text,this._lineOffsets=void 0}}this._version=t},FullTextDocument.prototype.getLineOffsets=function(){return void 0===this._lineOffsets&&(this._lineOffsets=computeLineOffsets(this._content,!0)),this._lineOffsets},FullTextDocument.prototype.positionAt=function(e){e=Math.max(Math.min(e,this._content.length),0);var t=this.getLineOffsets(),r=0,n=t.length;if(0===n)return{line:0,character:e};for(;r<n;){var i=Math.floor((r+n)/2);t[i]>e?n=i:r=i+1}var o=r-1;return{line:o,character:e-t[o]}},FullTextDocument.prototype.offsetAt=function(e){var t=this.getLineOffsets();if(e.line>=t.length)return this._content.length;if(e.line<0)return 0;var r=t[e.line],n=e.line+1<t.length?t[e.line+1]:this._content.length;return Math.max(Math.min(r+e.character,n),r)},Object.defineProperty(FullTextDocument.prototype,"lineCount",{get:function(){return this.getLineOffsets().length},enumerable:!0,configurable:!0}),FullTextDocument.isIncremental=function(e){var t=e;return null!=t&&"string"==typeof t.text&&void 0!==t.range&&(void 0===t.rangeLength||"number"==typeof t.rangeLength)},FullTextDocument.isFull=function(e){var t=e;return null!=t&&"string"==typeof t.text&&void 0===t.range&&void 0===t.rangeLength},FullTextDocument}();function mergeSort(e,t){if(e.length<=1)return e;var r=e.length/2|0,n=e.slice(0,r),i=e.slice(r);mergeSort(n,t),mergeSort(i,t);for(var o=0,a=0,s=0;o<n.length&&a<i.length;){var c=t(n[o],i[a]);e[s++]=c<=0?n[o++]:i[a++]}for(;o<n.length;)e[s++]=n[o++];for(;a<i.length;)e[s++]=i[a++];return e}function computeLineOffsets(e,t,r){void 0===r&&(r=0);for(var n=t?[r]:[],i=0;i<e.length;i++){var o=e.charCodeAt(i);13!==o&&10!==o||(13===o&&i+1<e.length&&10===e.charCodeAt(i+1)&&i++,n.push(r+i+1))}return n}function getWellformedRange(e){var t=e.start,r=e.end;return t.line>r.line||t.line===r.line&&t.character>r.character?{start:r,end:t}:e}function getWellformedEdit(e){var t=getWellformedRange(e.range);return t!==e.range?{newText:e.newText,range:t}:e}function localize(e,t){for(var r=[],n=2;n<arguments.length;n++)r[n-2]=arguments[n];return function vscode_nls_format(e,t){return 0===t.length?e:e.replace(/\{(\d+)\}/g,(function(e,r){var n=r[0];return void 0!==t[n]?t[n]:e}))}(t,r)}function loadMessageBundle(e){return localize}!function(e){e.create=function create(e,t,r,n){return new fe(e,t,r,n)},e.update=function update(e,t,r){if(e instanceof fe)return e.update(t,r),e;throw new Error("TextDocument.update: document must be created by TextDocument.create")},e.applyEdits=function applyEdits(e,t){for(var r=e.getText(),n=mergeSort(t.map(getWellformedEdit),(function(e,t){var r=e.range.start.line-t.range.start.line;return 0===r?e.range.start.character-t.range.start.character:r})),i=0,o=[],a=0,s=n;a<s.length;a++){var c=s[a],u=e.offsetAt(c.range.start);if(u<i)throw new Error("Overlapping edit");u>i&&o.push(r.substring(i,u)),c.newText.length&&o.push(c.newText),i=e.offsetAt(c.range.end)}return o.push(r.substr(i)),o.join("")}}(ce||(ce={})),function(e){e[e.Undefined=0]="Undefined",e[e.EnumValueMismatch=1]="EnumValueMismatch",e[e.UnexpectedEndOfComment=257]="UnexpectedEndOfComment",e[e.UnexpectedEndOfString=258]="UnexpectedEndOfString",e[e.UnexpectedEndOfNumber=259]="UnexpectedEndOfNumber",e[e.InvalidUnicode=260]="InvalidUnicode",e[e.InvalidEscapeCharacter=261]="InvalidEscapeCharacter",e[e.InvalidCharacter=262]="InvalidCharacter",e[e.PropertyExpected=513]="PropertyExpected",e[e.CommaExpected=514]="CommaExpected",e[e.ColonExpected=515]="ColonExpected",e[e.ValueExpected=516]="ValueExpected",e[e.CommaOrCloseBacketExpected=517]="CommaOrCloseBacketExpected",e[e.CommaOrCloseBraceExpected=518]="CommaOrCloseBraceExpected",e[e.TrailingComma=519]="TrailingComma",e[e.DuplicateKey=520]="DuplicateKey",e[e.CommentNotPermitted=521]="CommentNotPermitted",e[e.SchemaResolveError=768]="SchemaResolveError"}(ue||(ue={})),function(e){e.LATEST={textDocument:{completion:{completionItem:{documentationFormat:[M.Markdown,M.PlainText],commitCharactersSupport:!0}}}}}(le||(le={}));var he,pe,me=(he=function(e,t){return he=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},he(e,t)},function(e,t){function __(){this.constructor=e}he(e,t),e.prototype=null===t?Object.create(t):(__.prototype=t.prototype,new __)}),de=loadMessageBundle(),ge={"color-hex":{errorMessage:de("colorHexFormatWarning","Invalid color format. Use #RGB, #RGBA, #RRGGBB or #RRGGBBAA."),pattern:/^#([0-9A-Fa-f]{3,4}|([0-9A-Fa-f]{2}){3,4})$/},"date-time":{errorMessage:de("dateTimeFormatWarning","String is not a RFC3339 date-time."),pattern:/^(\d{4})-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9]|60)(\.[0-9]+)?(Z|(\+|-)([01][0-9]|2[0-3]):([0-5][0-9]))$/i},date:{errorMessage:de("dateFormatWarning","String is not a RFC3339 date."),pattern:/^(\d{4})-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$/i},time:{errorMessage:de("timeFormatWarning","String is not a RFC3339 time."),pattern:/^([01][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9]|60)(\.[0-9]+)?(Z|(\+|-)([01][0-9]|2[0-3]):([0-5][0-9]))$/i},email:{errorMessage:de("emailFormatWarning","String is not an e-mail address."),pattern:/^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/}},ve=function(){function ASTNodeImpl(e,t,r){void 0===r&&(r=0),this.offset=t,this.length=r,this.parent=e}return Object.defineProperty(ASTNodeImpl.prototype,"children",{get:function(){return[]},enumerable:!1,configurable:!0}),ASTNodeImpl.prototype.toString=function(){return"type: "+this.type+" ("+this.offset+"/"+this.length+")"+(this.parent?" parent: {"+this.parent.toString()+"}":"")},ASTNodeImpl}();(function(e){function NullASTNodeImpl(t,r){var n=e.call(this,t,r)||this;return n.type="null",n.value=null,n}me(NullASTNodeImpl,e)})(ve),function(e){function BooleanASTNodeImpl(t,r,n){var i=e.call(this,t,n)||this;return i.type="boolean",i.value=r,i}me(BooleanASTNodeImpl,e)}(ve),function(e){function ArrayASTNodeImpl(t,r){var n=e.call(this,t,r)||this;return n.type="array",n.items=[],n}me(ArrayASTNodeImpl,e),Object.defineProperty(ArrayASTNodeImpl.prototype,"children",{get:function(){return this.items},enumerable:!1,configurable:!0})}(ve),function(e){function NumberASTNodeImpl(t,r){var n=e.call(this,t,r)||this;return n.type="number",n.isInteger=!0,n.value=Number.NaN,n}me(NumberASTNodeImpl,e)}(ve),function(e){function StringASTNodeImpl(t,r,n){var i=e.call(this,t,r,n)||this;return i.type="string",i.value="",i}me(StringASTNodeImpl,e)}(ve),function(e){function PropertyASTNodeImpl(t,r,n){var i=e.call(this,t,r)||this;return i.type="property",i.colonOffset=-1,i.keyNode=n,i}me(PropertyASTNodeImpl,e),Object.defineProperty(PropertyASTNodeImpl.prototype,"children",{get:function(){return this.valueNode?[this.keyNode,this.valueNode]:[this.keyNode]},enumerable:!1,configurable:!0})}(ve),function(e){function ObjectASTNodeImpl(t,r){var n=e.call(this,t,r)||this;return n.type="object",n.properties=[],n}me(ObjectASTNodeImpl,e),Object.defineProperty(ObjectASTNodeImpl.prototype,"children",{get:function(){return this.properties},enumerable:!1,configurable:!0})}(ve);function asSchema(e){return isBoolean(e)?e?{}:{not:{}}:e}!function(e){e[e.Key=0]="Key",e[e.Enum=1]="Enum"}(pe||(pe={}));var ye=function(){function SchemaCollector(e,t){void 0===e&&(e=-1),this.focusOffset=e,this.exclude=t,this.schemas=[]}return SchemaCollector.prototype.add=function(e){this.schemas.push(e)},SchemaCollector.prototype.merge=function(e){Array.prototype.push.apply(this.schemas,e.schemas)},SchemaCollector.prototype.include=function(e){return(-1===this.focusOffset||jsonParser_contains(e,this.focusOffset))&&e!==this.exclude},SchemaCollector.prototype.newSub=function(){return new SchemaCollector(-1,this.exclude)},SchemaCollector}(),be=function(){function NoOpSchemaCollector(){}return Object.defineProperty(NoOpSchemaCollector.prototype,"schemas",{get:function(){return[]},enumerable:!1,configurable:!0}),NoOpSchemaCollector.prototype.add=function(e){},NoOpSchemaCollector.prototype.merge=function(e){},NoOpSchemaCollector.prototype.include=function(e){return!0},NoOpSchemaCollector.prototype.newSub=function(){return this},NoOpSchemaCollector.instance=new NoOpSchemaCollector,NoOpSchemaCollector}(),Se=function(){function ValidationResult(){this.problems=[],this.propertiesMatches=0,this.propertiesValueMatches=0,this.primaryValueMatches=0,this.enumValueMatch=!1,this.enumValues=void 0}return ValidationResult.prototype.hasProblems=function(){return!!this.problems.length},ValidationResult.prototype.mergeAll=function(e){for(var t=0,r=e;t<r.length;t++){var n=r[t];this.merge(n)}},ValidationResult.prototype.merge=function(e){this.problems=this.problems.concat(e.problems)},ValidationResult.prototype.mergeEnumValues=function(e){if(!this.enumValueMatch&&!e.enumValueMatch&&this.enumValues&&e.enumValues){this.enumValues=this.enumValues.concat(e.enumValues);for(var t=0,r=this.problems;t<r.length;t++){var n=r[t];n.code===ue.EnumValueMismatch&&(n.message=de("enumWarning","Value is not accepted. Valid values: {0}.",this.enumValues.map((function(e){return JSON.stringify(e)})).join(", ")))}}},ValidationResult.prototype.mergePropertyMatch=function(e){this.merge(e),this.propertiesMatches++,(e.enumValueMatch||!e.hasProblems()&&e.propertiesMatches)&&this.propertiesValueMatches++,e.enumValueMatch&&e.enumValues&&1===e.enumValues.length&&this.primaryValueMatches++},ValidationResult.prototype.compare=function(e){var t=this.hasProblems();return t!==e.hasProblems()?t?-1:1:this.enumValueMatch!==e.enumValueMatch?e.enumValueMatch?-1:1:this.primaryValueMatches!==e.primaryValueMatches?this.primaryValueMatches-e.primaryValueMatches:this.propertiesValueMatches!==e.propertiesValueMatches?this.propertiesValueMatches-e.propertiesValueMatches:this.propertiesMatches-e.propertiesMatches},ValidationResult}();function jsonParser_getNodeValue(e){return E(e)}function jsonParser_getNodePath(e){return I(e)}function jsonParser_contains(e,t,r){return void 0===r&&(r=!1),t>=e.offset&&t<e.offset+e.length||r&&t===e.offset+e.length}!function(){function JSONDocument(e,t,r){void 0===t&&(t=[]),void 0===r&&(r=[]),this.root=e,this.syntaxErrors=t,this.comments=r}JSONDocument.prototype.getNodeFromOffset=function(e,t){if(void 0===t&&(t=!1),this.root)return w(this.root,e,t)},JSONDocument.prototype.visit=function(e){if(this.root){var doVisit_1=function(t){var r=e(t),n=t.children;if(Array.isArray(n))for(var i=0;i<n.length&&r;i++)r=doVisit_1(n[i]);return r};doVisit_1(this.root)}},JSONDocument.prototype.validate=function(e,t){if(this.root&&t){var r=new Se;return validate(this.root,t,r,be.instance),r.problems.map((function(t){var r=s.create(e.positionAt(t.location.offset),e.positionAt(t.location.offset+t.location.length));return y.create(r,t.message,t.severity,t.code)}))}},JSONDocument.prototype.getMatchingSchemas=function(e,t,r){void 0===t&&(t=-1);var n=new ye(t,r);return this.root&&e&&validate(this.root,e,new Se,n),n.schemas}}();function validate(e,t,r,n){if(e&&n.include(e)){var i=e;switch(i.type){case"object":!function _validateObjectNode(e,t,r,n){for(var i=Object.create(null),o=[],a=0,s=e.properties;a<s.length;a++){i[L=(d=s[a]).keyNode.value]=d.valueNode,o.push(L)}if(Array.isArray(t.required))for(var c=0,u=t.required;c<u.length;c++){if(!i[k=u[c]]){var l=e.parent&&"property"===e.parent.type&&e.parent.keyNode,f=l?{offset:l.offset,length:l.length}:{offset:e.offset,length:1};r.problems.push({location:f,severity:g.Warning,message:de("MissingRequiredPropWarning",'Missing property "{0}".',k)})}}var propertyProcessed=function(e){for(var t=o.indexOf(e);t>=0;)o.splice(t,1),t=o.indexOf(e)};if(t.properties)for(var h=0,p=Object.keys(t.properties);h<p.length;h++){propertyProcessed(k=p[h]);var m=t.properties[k];if(I=i[k])if(isBoolean(m))if(m)r.propertiesMatches++,r.propertiesValueMatches++;else{var d=I.parent;r.problems.push({location:{offset:d.keyNode.offset,length:d.keyNode.length},severity:g.Warning,message:t.errorMessage||de("DisallowedExtraPropWarning","Property {0} is not allowed.",k)})}else validate(I,m,N=new Se,n),r.mergePropertyMatch(N)}if(t.patternProperties)for(var v=0,y=Object.keys(t.patternProperties);v<y.length;v++)for(var b=y[v],S=new RegExp(b),x=0,C=o.slice(0);x<C.length;x++){var k=C[x];if(S.test(k))if(propertyProcessed(k),I=i[k])if(isBoolean(m=t.patternProperties[b]))if(m)r.propertiesMatches++,r.propertiesValueMatches++;else{d=I.parent;r.problems.push({location:{offset:d.keyNode.offset,length:d.keyNode.length},severity:g.Warning,message:t.errorMessage||de("DisallowedExtraPropWarning","Property {0} is not allowed.",k)})}else validate(I,m,N=new Se,n),r.mergePropertyMatch(N)}if("object"==typeof t.additionalProperties)for(var A=0,O=o;A<O.length;A++){if(I=i[k=O[A]]){var N=new Se;validate(I,t.additionalProperties,N,n),r.mergePropertyMatch(N)}}else if(!1===t.additionalProperties&&o.length>0)for(var T=0,w=o;T<w.length;T++){var I;if(I=i[k=w[T]]){d=I.parent;r.problems.push({location:{offset:d.keyNode.offset,length:d.keyNode.length},severity:g.Warning,message:t.errorMessage||de("DisallowedExtraPropWarning","Property {0} is not allowed.",k)})}}objects_isNumber(t.maxProperties)&&e.properties.length>t.maxProperties&&r.problems.push({location:{offset:e.offset,length:e.length},severity:g.Warning,message:de("MaxPropWarning","Object has more properties than limit of {0}.",t.maxProperties)});objects_isNumber(t.minProperties)&&e.properties.length<t.minProperties&&r.problems.push({location:{offset:e.offset,length:e.length},severity:g.Warning,message:de("MinPropWarning","Object has fewer properties than the required number of {0}",t.minProperties)});if(t.dependencies)for(var E=0,j=Object.keys(t.dependencies);E<j.length;E++){if(i[L=j[E]]){var P=t.dependencies[L];if(Array.isArray(P))for(var _=0,M=P;_<M.length;_++){var D=M[_];i[D]?r.propertiesValueMatches++:r.problems.push({location:{offset:e.offset,length:e.length},severity:g.Warning,message:de("RequiredDependentPropWarning","Object is missing property {0} required by property {1}.",D,L)})}else if(m=asSchema(P))validate(e,m,N=new Se,n),r.mergePropertyMatch(N)}}var F=asSchema(t.propertyNames);if(F)for(var R=0,V=e.properties;R<V.length;R++){var L;(L=V[R].keyNode)&&validate(L,F,r,be.instance)}}(i,t,r,n);break;case"array":!function _validateArrayNode(e,t,r,n){if(Array.isArray(t.items)){for(var i=t.items,o=0;o<i.length;o++){var a=asSchema(i[o]),s=new Se;(h=e.items[o])?(validate(h,a,s,n),r.mergePropertyMatch(s)):e.items.length>=i.length&&r.propertiesValueMatches++}if(e.items.length>i.length)if("object"==typeof t.additionalItems)for(var c=i.length;c<e.items.length;c++){s=new Se;validate(e.items[c],t.additionalItems,s,n),r.mergePropertyMatch(s)}else!1===t.additionalItems&&r.problems.push({location:{offset:e.offset,length:e.length},severity:g.Warning,message:de("additionalItemsWarning","Array has too many items according to schema. Expected {0} or fewer.",i.length)})}else{var u=asSchema(t.items);if(u)for(var l=0,f=e.items;l<f.length;l++){var h;validate(h=f[l],u,s=new Se,n),r.mergePropertyMatch(s)}}var p=asSchema(t.contains);if(p){var m=e.items.some((function(e){var t=new Se;return validate(e,p,t,be.instance),!t.hasProblems()}));m||r.problems.push({location:{offset:e.offset,length:e.length},severity:g.Warning,message:t.errorMessage||de("requiredItemMissingWarning","Array does not contain required item.")})}objects_isNumber(t.minItems)&&e.items.length<t.minItems&&r.problems.push({location:{offset:e.offset,length:e.length},severity:g.Warning,message:de("minItemsWarning","Array has too few items. Expected {0} or more.",t.minItems)});objects_isNumber(t.maxItems)&&e.items.length>t.maxItems&&r.problems.push({location:{offset:e.offset,length:e.length},severity:g.Warning,message:de("maxItemsWarning","Array has too many items. Expected {0} or fewer.",t.maxItems)});if(!0===t.uniqueItems){var d=jsonParser_getNodeValue(e),v=d.some((function(e,t){return t!==d.lastIndexOf(e)}));v&&r.problems.push({location:{offset:e.offset,length:e.length},severity:g.Warning,message:de("uniqueItemsWarning","Array has duplicate items.")})}}(i,t,r,n);break;case"string":!function _validateStringNode(e,t,r,n){objects_isNumber(t.minLength)&&e.value.length<t.minLength&&r.problems.push({location:{offset:e.offset,length:e.length},severity:g.Warning,message:de("minLengthWarning","String is shorter than the minimum length of {0}.",t.minLength)});objects_isNumber(t.maxLength)&&e.value.length>t.maxLength&&r.problems.push({location:{offset:e.offset,length:e.length},severity:g.Warning,message:de("maxLengthWarning","String is longer than the maximum length of {0}.",t.maxLength)});if(function isString(e){return"string"==typeof e}(t.pattern)){new RegExp(t.pattern).test(e.value)||r.problems.push({location:{offset:e.offset,length:e.length},severity:g.Warning,message:t.patternErrorMessage||t.errorMessage||de("patternWarning",'String does not match the pattern of "{0}".',t.pattern)})}if(t.format)switch(t.format){case"uri":case"uri-reference":var i=void 0;if(e.value){var o=/^(([^:/?#]+?):)?(\/\/([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?/.exec(e.value);o?o[2]||"uri"!==t.format||(i=de("uriSchemeMissing","URI with a scheme is expected.")):i=de("uriMissing","URI is expected.")}else i=de("uriEmpty","URI expected.");i&&r.problems.push({location:{offset:e.offset,length:e.length},severity:g.Warning,message:t.patternErrorMessage||t.errorMessage||de("uriFormatWarning","String is not a URI: {0}",i)});break;case"color-hex":case"date-time":case"date":case"time":case"email":var a=ge[t.format];e.value&&a.pattern.exec(e.value)||r.problems.push({location:{offset:e.offset,length:e.length},severity:g.Warning,message:t.patternErrorMessage||t.errorMessage||a.errorMessage})}}(i,t,r);break;case"number":!function _validateNumberNode(e,t,r,n){var i=e.value;function normalizeFloats(e){var t,r=/^(-?\d+)(?:\.(\d+))?(?:e([-+]\d+))?$/.exec(e.toString());return r&&{value:Number(r[1]+(r[2]||"")),multiplier:((null===(t=r[2])||void 0===t?void 0:t.length)||0)-(parseInt(r[3])||0)}}if(objects_isNumber(t.multipleOf)){var o=-1;if(Number.isInteger(t.multipleOf))o=i%t.multipleOf;else{var a=normalizeFloats(t.multipleOf),s=normalizeFloats(i);if(a&&s){var c=Math.pow(10,Math.abs(s.multiplier-a.multiplier));s.multiplier<a.multiplier?s.value*=c:a.value*=c,o=s.value%a.value}}0!==o&&r.problems.push({location:{offset:e.offset,length:e.length},severity:g.Warning,message:de("multipleOfWarning","Value is not divisible by {0}.",t.multipleOf)})}function getExclusiveLimit(e,t){return objects_isNumber(t)?t:isBoolean(t)&&t?e:void 0}function getLimit(e,t){if(!isBoolean(t)||!t)return e}var u=getExclusiveLimit(t.minimum,t.exclusiveMinimum);objects_isNumber(u)&&i<=u&&r.problems.push({location:{offset:e.offset,length:e.length},severity:g.Warning,message:de("exclusiveMinimumWarning","Value is below the exclusive minimum of {0}.",u)});var l=getExclusiveLimit(t.maximum,t.exclusiveMaximum);objects_isNumber(l)&&i>=l&&r.problems.push({location:{offset:e.offset,length:e.length},severity:g.Warning,message:de("exclusiveMaximumWarning","Value is above the exclusive maximum of {0}.",l)});var f=getLimit(t.minimum,t.exclusiveMinimum);objects_isNumber(f)&&i<f&&r.problems.push({location:{offset:e.offset,length:e.length},severity:g.Warning,message:de("minimumWarning","Value is below the minimum of {0}.",f)});var h=getLimit(t.maximum,t.exclusiveMaximum);objects_isNumber(h)&&i>h&&r.problems.push({location:{offset:e.offset,length:e.length},severity:g.Warning,message:de("maximumWarning","Value is above the maximum of {0}.",h)})}(i,t,r);break;case"property":return validate(i.valueNode,t,r,n)}!function _validateNode(){function matchesType(e){return i.type===e||"integer"===e&&"number"===i.type&&i.isInteger}Array.isArray(t.type)?t.type.some(matchesType)||r.problems.push({location:{offset:i.offset,length:i.length},severity:g.Warning,message:t.errorMessage||de("typeArrayMismatchWarning","Incorrect type. Expected one of {0}.",t.type.join(", "))}):t.type&&(matchesType(t.type)||r.problems.push({location:{offset:i.offset,length:i.length},severity:g.Warning,message:t.errorMessage||de("typeMismatchWarning",'Incorrect type. Expected "{0}".',t.type)}));if(Array.isArray(t.allOf))for(var e=0,o=t.allOf;e<o.length;e++){var a=o[e];validate(i,asSchema(a),r,n)}var s=asSchema(t.not);if(s){var c=new Se,u=n.newSub();validate(i,s,c,u),c.hasProblems()||r.problems.push({location:{offset:i.offset,length:i.length},severity:g.Warning,message:de("notSchemaWarning","Matches a schema that is not allowed.")});for(var l=0,f=u.schemas;l<f.length;l++){var h=f[l];h.inverted=!h.inverted,n.add(h)}}var testAlternatives=function(e,t){for(var o=[],a=void 0,s=0,c=e;s<c.length;s++){var u=asSchema(c[s]),l=new Se,f=n.newSub();if(validate(i,u,l,f),l.hasProblems()||o.push(u),a)if(t||l.hasProblems()||a.validationResult.hasProblems()){var h=l.compare(a.validationResult);h>0?a={schema:u,validationResult:l,matchingSchemas:f}:0===h&&(a.matchingSchemas.merge(f),a.validationResult.mergeEnumValues(l))}else a.matchingSchemas.merge(f),a.validationResult.propertiesMatches+=l.propertiesMatches,a.validationResult.propertiesValueMatches+=l.propertiesValueMatches;else a={schema:u,validationResult:l,matchingSchemas:f}}return o.length>1&&t&&r.problems.push({location:{offset:i.offset,length:1},severity:g.Warning,message:de("oneOfWarning","Matches multiple schemas when only one must validate.")}),a&&(r.merge(a.validationResult),r.propertiesMatches+=a.validationResult.propertiesMatches,r.propertiesValueMatches+=a.validationResult.propertiesValueMatches,n.merge(a.matchingSchemas)),o.length};Array.isArray(t.anyOf)&&testAlternatives(t.anyOf,!1);Array.isArray(t.oneOf)&&testAlternatives(t.oneOf,!0);var testBranch=function(e){var t=new Se,o=n.newSub();validate(i,asSchema(e),t,o),r.merge(t),r.propertiesMatches+=t.propertiesMatches,r.propertiesValueMatches+=t.propertiesValueMatches,n.merge(o)},p=asSchema(t.if);p&&function(e,t,r){var o=asSchema(e),a=new Se,s=n.newSub();validate(i,o,a,s),n.merge(s),a.hasProblems()?r&&testBranch(r):t&&testBranch(t)}(p,asSchema(t.then),asSchema(t.else));if(Array.isArray(t.enum)){for(var m=jsonParser_getNodeValue(i),d=!1,v=0,y=t.enum;v<y.length;v++){if(equals(m,y[v])){d=!0;break}}r.enumValues=t.enum,r.enumValueMatch=d,d||r.problems.push({location:{offset:i.offset,length:i.length},severity:g.Warning,code:ue.EnumValueMismatch,message:t.errorMessage||de("enumWarning","Value is not accepted. Valid values: {0}.",t.enum.map((function(e){return JSON.stringify(e)})).join(", "))})}if(isDefined(t.const)){equals(m=jsonParser_getNodeValue(i),t.const)?r.enumValueMatch=!0:(r.problems.push({location:{offset:i.offset,length:i.length},severity:g.Warning,code:ue.EnumValueMismatch,message:t.errorMessage||de("constWarning","Value must be {0}.",JSON.stringify(t.const))}),r.enumValueMatch=!1),r.enumValues=[t.const]}t.deprecationMessage&&i.parent&&r.problems.push({location:{offset:i.parent.offset,length:i.parent.length},severity:g.Warning,message:t.deprecationMessage})}(),n.add({node:i,schema:t})}}function stringifyObject(e,t,r){if(null!==e&&"object"==typeof e){var n=t+"\t";if(Array.isArray(e)){if(0===e.length)return"[]";for(var i="[\n",o=0;o<e.length;o++)i+=n+stringifyObject(e[o],n,r),o<e.length-1&&(i+=","),i+="\n";return i+=t+"]"}var a=Object.keys(e);if(0===a.length)return"{}";for(i="{\n",o=0;o<a.length;o++){var s=a[o];i+=n+JSON.stringify(s)+": "+stringifyObject(e[s],n,r),o<a.length-1&&(i+=","),i+="\n"}return i+=t+"}"}return r(e)}function endsWith(e,t){var r=e.length-t.length;return r>0?e.lastIndexOf(t)===r:0===r&&e===t}function convertSimple2RegExpPattern(e){return e.replace(/[\-\\\{\}\+\?\|\^\$\.\,\[\]\(\)\#\s]/g,"\\$&").replace(/[\*]/g,".*")}var xe=loadMessageBundle();(function(){function JSONCompletion(e,t,r,n){void 0===t&&(t=[]),void 0===r&&(r=Promise),void 0===n&&(n={}),this.schemaService=e,this.contributions=t,this.promiseConstructor=r,this.clientCapabilities=n}JSONCompletion.prototype.doResolve=function(e){for(var t=this.contributions.length-1;t>=0;t--){var r=this.contributions[t].resolveCompletion;if(r){var n=r(e);if(n)return n}}return this.promiseConstructor.resolve(e)},JSONCompletion.prototype.doComplete=function(e,t,r){var n=this,i={items:[],isIncomplete:!1},o=e.getText(),a=e.offsetAt(t),c=r.getNodeFromOffset(a,!0);if(this.isInComment(e,c?c.offset:0,a))return Promise.resolve(i);if(c&&a===c.offset+c.length&&a>0){var u=o[a-1];("object"===c.type&&"}"===u||"array"===c.type&&"]"===u)&&(c=c.parent)}var l,f=this.getCurrentWord(e,a);if(!c||"string"!==c.type&&"number"!==c.type&&"boolean"!==c.type&&"null"!==c.type){var h=a-f.length;h>0&&'"'===o[h-1]&&h--,l=s.create(e.positionAt(h),t)}else l=s.create(e.positionAt(c.offset),e.positionAt(c.offset+c.length));var p={},m={add:function(e){var t=e.label,r=p[t];if(r)r.documentation||(r.documentation=e.documentation);else{if((t=t.replace(/[\n]/g,"↵")).length>60){var n=t.substr(0,57).trim()+"...";p[n]||(t=n)}l&&void 0!==e.insertText&&(e.textEdit=S.replace(l,e.insertText)),e.label=t,p[t]=e,i.items.push(e)}},setAsIncomplete:function(){i.isIncomplete=!0},error:function(e){console.error(e)},log:function(e){console.log(e)},getNumberOfProposals:function(){return i.items.length}};return this.schemaService.getSchemaForResource(e.uri,r).then((function(t){var s=[],u=!0,h="",d=void 0;if(c&&"string"===c.type){var g=c.parent;g&&"property"===g.type&&g.keyNode===c&&(u=!g.valueNode,d=g,h=o.substr(c.offset+1,c.length-2),g&&(c=g.parent))}if(c&&"object"===c.type){if(c.offset===a)return i;c.properties.forEach((function(e){d&&d===e||(p[e.keyNode.value]=L.create("__"))}));var v="";u&&(v=n.evaluateSeparatorAfter(e,e.offsetAt(l.end))),t?n.getPropertyCompletions(t,r,c,u,v,m):n.getSchemaLessPropertyCompletions(r,c,h,m);var y=jsonParser_getNodePath(c);n.contributions.forEach((function(t){var r=t.collectPropertyCompletions(e.uri,y,f,u,""===v,m);r&&s.push(r)})),!t&&f.length>0&&'"'!==o.charAt(a-f.length-1)&&(m.add({kind:F.Property,label:n.getLabelForValue(f),insertText:n.getInsertTextForProperty(f,void 0,!1,v),insertTextFormat:R.Snippet,documentation:""}),m.setAsIncomplete())}var b={};return t?n.getValueCompletions(t,r,c,a,e,m,b):n.getSchemaLessValueCompletions(r,c,a,e,m),n.contributions.length>0&&n.getContributedValueCompletions(r,c,a,e,m,s),n.promiseConstructor.all(s).then((function(){if(0===m.getNumberOfProposals()){var t=a;!c||"string"!==c.type&&"number"!==c.type&&"boolean"!==c.type&&"null"!==c.type||(t=c.offset+c.length);var r=n.evaluateSeparatorAfter(e,t);n.addFillerValueCompletions(b,r,m)}return i}))}))},JSONCompletion.prototype.getPropertyCompletions=function(e,t,r,n,i,o){var a=this;t.getMatchingSchemas(e.schema,r.offset).forEach((function(e){if(e.node===r&&!e.inverted){var t=e.schema.properties;t&&Object.keys(t).forEach((function(e){var r=t[e];if("object"==typeof r&&!r.deprecationMessage&&!r.doNotSuggest){var s={kind:F.Property,label:e,insertText:a.getInsertTextForProperty(e,r,n,i),insertTextFormat:R.Snippet,filterText:a.getFilterTextForValue(e),documentation:a.fromMarkup(r.markdownDescription)||r.description||""};void 0!==r.suggestSortText&&(s.sortText=r.suggestSortText),s.insertText&&endsWith(s.insertText,"$1"+i)&&(s.command={title:"Suggest",command:"editor.action.triggerSuggest"}),o.add(s)}}));var s=e.schema.propertyNames;if("object"==typeof s&&!s.deprecationMessage&&!s.doNotSuggest){var propertyNameCompletionItem=function(e,t){void 0===t&&(t=void 0);var r={kind:F.Property,label:e,insertText:a.getInsertTextForProperty(e,void 0,n,i),insertTextFormat:R.Snippet,filterText:a.getFilterTextForValue(e),documentation:t||a.fromMarkup(s.markdownDescription)||s.description||""};void 0!==s.suggestSortText&&(r.sortText=s.suggestSortText),r.insertText&&endsWith(r.insertText,"$1"+i)&&(r.command={title:"Suggest",command:"editor.action.triggerSuggest"}),o.add(r)};if(s.enum)for(var c=0;c<s.enum.length;c++){var u=void 0;s.markdownEnumDescriptions&&c<s.markdownEnumDescriptions.length?u=a.fromMarkup(s.markdownEnumDescriptions[c]):s.enumDescriptions&&c<s.enumDescriptions.length&&(u=s.enumDescriptions[c]),propertyNameCompletionItem(s.enum[c],u)}s.const&&propertyNameCompletionItem(s.const)}}}))},JSONCompletion.prototype.getSchemaLessPropertyCompletions=function(e,t,r,n){var i=this,collectCompletionsForSimilarObject=function(e){e.properties.forEach((function(e){var t=e.keyNode.value;n.add({kind:F.Property,label:t,insertText:i.getInsertTextForValue(t,""),insertTextFormat:R.Snippet,filterText:i.getFilterTextForValue(t),documentation:""})}))};if(t.parent)if("property"===t.parent.type){var o=t.parent.keyNode.value;e.visit((function(e){return"property"===e.type&&e!==t.parent&&e.keyNode.value===o&&e.valueNode&&"object"===e.valueNode.type&&collectCompletionsForSimilarObject(e.valueNode),!0}))}else"array"===t.parent.type&&t.parent.items.forEach((function(e){"object"===e.type&&e!==t&&collectCompletionsForSimilarObject(e)}));else"object"===t.type&&n.add({kind:F.Property,label:"$schema",insertText:this.getInsertTextForProperty("$schema",void 0,!0,""),insertTextFormat:R.Snippet,documentation:"",filterText:this.getFilterTextForValue("$schema")})},JSONCompletion.prototype.getSchemaLessValueCompletions=function(e,t,r,n,i){var o=this,a=r;if(!t||"string"!==t.type&&"number"!==t.type&&"boolean"!==t.type&&"null"!==t.type||(a=t.offset+t.length,t=t.parent),!t)return i.add({kind:this.getSuggestionKind("object"),label:"Empty object",insertText:this.getInsertTextForValue({},""),insertTextFormat:R.Snippet,documentation:""}),void i.add({kind:this.getSuggestionKind("array"),label:"Empty array",insertText:this.getInsertTextForValue([],""),insertTextFormat:R.Snippet,documentation:""});var s=this.evaluateSeparatorAfter(n,a),collectSuggestionsForValues=function(e){e.parent&&!jsonParser_contains(e.parent,r,!0)&&i.add({kind:o.getSuggestionKind(e.type),label:o.getLabelTextForMatchingNode(e,n),insertText:o.getInsertTextForMatchingNode(e,n,s),insertTextFormat:R.Snippet,documentation:""}),"boolean"===e.type&&o.addBooleanValueCompletion(!e.value,s,i)};if("property"===t.type&&r>(t.colonOffset||0)){var c=t.valueNode;if(c&&(r>c.offset+c.length||"object"===c.type||"array"===c.type))return;var u=t.keyNode.value;e.visit((function(e){return"property"===e.type&&e.keyNode.value===u&&e.valueNode&&collectSuggestionsForValues(e.valueNode),!0})),"$schema"===u&&t.parent&&!t.parent.parent&&this.addDollarSchemaCompletions(s,i)}if("array"===t.type)if(t.parent&&"property"===t.parent.type){var l=t.parent.keyNode.value;e.visit((function(e){return"property"===e.type&&e.keyNode.value===l&&e.valueNode&&"array"===e.valueNode.type&&e.valueNode.items.forEach(collectSuggestionsForValues),!0}))}else t.items.forEach(collectSuggestionsForValues)},JSONCompletion.prototype.getValueCompletions=function(e,t,r,n,i,o,a){var s=n,c=void 0,u=void 0;if(!r||"string"!==r.type&&"number"!==r.type&&"boolean"!==r.type&&"null"!==r.type||(s=r.offset+r.length,u=r,r=r.parent),r){if("property"===r.type&&n>(r.colonOffset||0)){var l=r.valueNode;if(l&&n>l.offset+l.length)return;c=r.keyNode.value,r=r.parent}if(r&&(void 0!==c||"array"===r.type)){for(var f=this.evaluateSeparatorAfter(i,s),h=0,p=t.getMatchingSchemas(e.schema,r.offset,u);h<p.length;h++){var m=p[h];if(m.node===r&&!m.inverted&&m.schema){if("array"===r.type&&m.schema.items)if(Array.isArray(m.schema.items)){var d=this.findItemAtOffset(r,i,n);d<m.schema.items.length&&this.addSchemaValueCompletions(m.schema.items[d],f,o,a)}else this.addSchemaValueCompletions(m.schema.items,f,o,a);if(void 0!==c){var g=!1;if(m.schema.properties)(S=m.schema.properties[c])&&(g=!0,this.addSchemaValueCompletions(S,f,o,a));if(m.schema.patternProperties&&!g)for(var v=0,y=Object.keys(m.schema.patternProperties);v<y.length;v++){var b=y[v];if(new RegExp(b).test(c)){g=!0;var S=m.schema.patternProperties[b];this.addSchemaValueCompletions(S,f,o,a)}}if(m.schema.additionalProperties&&!g){S=m.schema.additionalProperties;this.addSchemaValueCompletions(S,f,o,a)}}}}"$schema"!==c||r.parent||this.addDollarSchemaCompletions(f,o),a.boolean&&(this.addBooleanValueCompletion(!0,f,o),this.addBooleanValueCompletion(!1,f,o)),a.null&&this.addNullValueCompletion(f,o)}}else this.addSchemaValueCompletions(e.schema,"",o,a)},JSONCompletion.prototype.getContributedValueCompletions=function(e,t,r,n,i,o){if(t){if("string"!==t.type&&"number"!==t.type&&"boolean"!==t.type&&"null"!==t.type||(t=t.parent),t&&"property"===t.type&&r>(t.colonOffset||0)){var a=t.keyNode.value,s=t.valueNode;if((!s||r<=s.offset+s.length)&&t.parent){var c=jsonParser_getNodePath(t.parent);this.contributions.forEach((function(e){var t=e.collectValueCompletions(n.uri,c,a,i);t&&o.push(t)}))}}}else this.contributions.forEach((function(e){var t=e.collectDefaultCompletions(n.uri,i);t&&o.push(t)}))},JSONCompletion.prototype.addSchemaValueCompletions=function(e,t,r,n){var i=this;"object"==typeof e&&(this.addEnumValueCompletions(e,t,r),this.addDefaultValueCompletions(e,t,r),this.collectTypes(e,n),Array.isArray(e.allOf)&&e.allOf.forEach((function(e){return i.addSchemaValueCompletions(e,t,r,n)})),Array.isArray(e.anyOf)&&e.anyOf.forEach((function(e){return i.addSchemaValueCompletions(e,t,r,n)})),Array.isArray(e.oneOf)&&e.oneOf.forEach((function(e){return i.addSchemaValueCompletions(e,t,r,n)})))},JSONCompletion.prototype.addDefaultValueCompletions=function(e,t,r,n){var i=this;void 0===n&&(n=0);var o=!1;if(isDefined(e.default)){for(var a=e.type,s=e.default,c=n;c>0;c--)s=[s],a="array";r.add({kind:this.getSuggestionKind(a),label:this.getLabelForValue(s),insertText:this.getInsertTextForValue(s,t),insertTextFormat:R.Snippet,detail:xe("json.suggest.default","Default value")}),o=!0}Array.isArray(e.examples)&&e.examples.forEach((function(a){for(var s=e.type,c=a,u=n;u>0;u--)c=[c],s="array";r.add({kind:i.getSuggestionKind(s),label:i.getLabelForValue(c),insertText:i.getInsertTextForValue(c,t),insertTextFormat:R.Snippet}),o=!0})),Array.isArray(e.defaultSnippets)&&e.defaultSnippets.forEach((function(a){var s,c,u=e.type,l=a.body,f=a.label;if(isDefined(l)){e.type;for(var h=n;h>0;h--)l=[l],"array";s=i.getInsertTextForSnippetValue(l,t),c=i.getFilterTextForSnippetValue(l),f=f||i.getLabelForSnippetValue(l)}else{if("string"!=typeof a.bodyText)return;var p="",m="",d="";for(h=n;h>0;h--)p=p+d+"[\n",m=m+"\n"+d+"]",d+="\t",u="array";s=p+d+a.bodyText.split("\n").join("\n"+d)+m+t,f=f||s,c=s.replace(/[\n]/g,"")}r.add({kind:i.getSuggestionKind(u),label:f,documentation:i.fromMarkup(a.markdownDescription)||a.description,insertText:s,insertTextFormat:R.Snippet,filterText:c}),o=!0})),!o&&"object"==typeof e.items&&!Array.isArray(e.items)&&n<5&&this.addDefaultValueCompletions(e.items,t,r,n+1)},JSONCompletion.prototype.addEnumValueCompletions=function(e,t,r){if(isDefined(e.const)&&r.add({kind:this.getSuggestionKind(e.type),label:this.getLabelForValue(e.const),insertText:this.getInsertTextForValue(e.const,t),insertTextFormat:R.Snippet,documentation:this.fromMarkup(e.markdownDescription)||e.description}),Array.isArray(e.enum))for(var n=0,i=e.enum.length;n<i;n++){var o=e.enum[n],a=this.fromMarkup(e.markdownDescription)||e.description;e.markdownEnumDescriptions&&n<e.markdownEnumDescriptions.length&&this.doesSupportMarkdown()?a=this.fromMarkup(e.markdownEnumDescriptions[n]):e.enumDescriptions&&n<e.enumDescriptions.length&&(a=e.enumDescriptions[n]),r.add({kind:this.getSuggestionKind(e.type),label:this.getLabelForValue(o),insertText:this.getInsertTextForValue(o,t),insertTextFormat:R.Snippet,documentation:a})}},JSONCompletion.prototype.collectTypes=function(e,t){if(!Array.isArray(e.enum)&&!isDefined(e.const)){var r=e.type;Array.isArray(r)?r.forEach((function(e){return t[e]=!0})):r&&(t[r]=!0)}},JSONCompletion.prototype.addFillerValueCompletions=function(e,t,r){e.object&&r.add({kind:this.getSuggestionKind("object"),label:"{}",insertText:this.getInsertTextForGuessedValue({},t),insertTextFormat:R.Snippet,detail:xe("defaults.object","New object"),documentation:""}),e.array&&r.add({kind:this.getSuggestionKind("array"),label:"[]",insertText:this.getInsertTextForGuessedValue([],t),insertTextFormat:R.Snippet,detail:xe("defaults.array","New array"),documentation:""})},JSONCompletion.prototype.addBooleanValueCompletion=function(e,t,r){r.add({kind:this.getSuggestionKind("boolean"),label:e?"true":"false",insertText:this.getInsertTextForValue(e,t),insertTextFormat:R.Snippet,documentation:""})},JSONCompletion.prototype.addNullValueCompletion=function(e,t){t.add({kind:this.getSuggestionKind("null"),label:"null",insertText:"null"+e,insertTextFormat:R.Snippet,documentation:""})},JSONCompletion.prototype.addDollarSchemaCompletions=function(e,t){var r=this,n=this.schemaService.getRegisteredSchemaIds((function(e){return"http"===e||"https"===e}));n.forEach((function(n){return t.add({kind:F.Module,label:r.getLabelForValue(n),filterText:r.getFilterTextForValue(n),insertText:r.getInsertTextForValue(n,e),insertTextFormat:R.Snippet,documentation:""})}))},JSONCompletion.prototype.getLabelForValue=function(e){return JSON.stringify(e)},JSONCompletion.prototype.getFilterTextForValue=function(e){return JSON.stringify(e)},JSONCompletion.prototype.getFilterTextForSnippetValue=function(e){return JSON.stringify(e).replace(/\$\{\d+:([^}]+)\}|\$\d+/g,"$1")},JSONCompletion.prototype.getLabelForSnippetValue=function(e){return JSON.stringify(e).replace(/\$\{\d+:([^}]+)\}|\$\d+/g,"$1")},JSONCompletion.prototype.getInsertTextForPlainText=function(e){return e.replace(/[\\\$\}]/g,"\\$&")},JSONCompletion.prototype.getInsertTextForValue=function(e,t){var r=JSON.stringify(e,null,"\t");return"{}"===r?"{$1}"+t:"[]"===r?"[$1]"+t:this.getInsertTextForPlainText(r+t)},JSONCompletion.prototype.getInsertTextForSnippetValue=function(e,t){return stringifyObject(e,"",(function(e){return"string"==typeof e&&"^"===e[0]?e.substr(1):JSON.stringify(e)}))+t},JSONCompletion.prototype.getInsertTextForGuessedValue=function(e,t){switch(typeof e){case"object":return null===e?"${1:null}"+t:this.getInsertTextForValue(e,t);case"string":var r=JSON.stringify(e);return r=r.substr(1,r.length-2),'"${1:'+(r=this.getInsertTextForPlainText(r))+'}"'+t;case"number":case"boolean":return"${1:"+JSON.stringify(e)+"}"+t}return this.getInsertTextForValue(e,t)},JSONCompletion.prototype.getSuggestionKind=function(e){if(Array.isArray(e)){var t=e;e=t.length>0?t[0]:void 0}if(!e)return F.Value;switch(e){case"string":default:return F.Value;case"object":return F.Module;case"property":return F.Property}},JSONCompletion.prototype.getLabelTextForMatchingNode=function(e,t){switch(e.type){case"array":return"[]";case"object":return"{}";default:return t.getText().substr(e.offset,e.length)}},JSONCompletion.prototype.getInsertTextForMatchingNode=function(e,t,r){switch(e.type){case"array":return this.getInsertTextForValue([],r);case"object":return this.getInsertTextForValue({},r);default:var n=t.getText().substr(e.offset,e.length)+r;return this.getInsertTextForPlainText(n)}},JSONCompletion.prototype.getInsertTextForProperty=function(e,t,r,n){var i=this.getInsertTextForValue(e,"");if(!r)return i;var o,a=i+": ",s=0;if(t){if(Array.isArray(t.defaultSnippets)){if(1===t.defaultSnippets.length){var c=t.defaultSnippets[0].body;isDefined(c)&&(o=this.getInsertTextForSnippetValue(c,""))}s+=t.defaultSnippets.length}if(t.enum&&(o||1!==t.enum.length||(o=this.getInsertTextForGuessedValue(t.enum[0],"")),s+=t.enum.length),isDefined(t.default)&&(o||(o=this.getInsertTextForGuessedValue(t.default,"")),s++),Array.isArray(t.examples)&&t.examples.length&&(o||(o=this.getInsertTextForGuessedValue(t.examples[0],"")),s+=t.examples.length),0===s){var u=Array.isArray(t.type)?t.type[0]:t.type;switch(u||(t.properties?u="object":t.items&&(u="array")),u){case"boolean":o="$1";break;case"string":o='"$1"';break;case"object":o="{$1}";break;case"array":o="[$1]";break;case"number":case"integer":o="${1:0}";break;case"null":o="${1:null}";break;default:return i}}}return(!o||s>1)&&(o="$1"),a+o+n},JSONCompletion.prototype.getCurrentWord=function(e,t){for(var r=t-1,n=e.getText();r>=0&&-1===' \t\n\r\v":{[,]}'.indexOf(n.charAt(r));)r--;return n.substring(r+1,t)},JSONCompletion.prototype.evaluateSeparatorAfter=function(e,t){var r=N(e.getText(),!0);switch(r.setPosition(t),r.scan()){case 5:case 2:case 4:case 17:return"";default:return","}},JSONCompletion.prototype.findItemAtOffset=function(e,t,r){for(var n=N(t.getText(),!0),i=e.items,o=i.length-1;o>=0;o--){var a=i[o];if(r>a.offset+a.length)return n.setPosition(a.offset+a.length),5===n.scan()&&r>=n.getTokenOffset()+n.getTokenLength()?o+1:o;if(r>=a.offset)return o}return 0},JSONCompletion.prototype.isInComment=function(e,t,r){var n=N(e.getText(),!1);n.setPosition(t);for(var i=n.scan();17!==i&&n.getTokenOffset()+n.getTokenLength()<r;)i=n.scan();return(12===i||13===i)&&n.getTokenOffset()<=r},JSONCompletion.prototype.fromMarkup=function(e){if(e&&this.doesSupportMarkdown())return{kind:M.Markdown,value:e}},JSONCompletion.prototype.doesSupportMarkdown=function(){if(!isDefined(this.supportsMarkdown)){var e=this.clientCapabilities.textDocument&&this.clientCapabilities.textDocument.completion;this.supportsMarkdown=e&&e.completionItem&&Array.isArray(e.completionItem.documentationFormat)&&-1!==e.completionItem.documentationFormat.indexOf(M.Markdown)}return this.supportsMarkdown},JSONCompletion.prototype.doesSupportsCommitCharacters=function(){if(!isDefined(this.supportsCommitCharacters)){var e=this.clientCapabilities.textDocument&&this.clientCapabilities.textDocument.completion;this.supportsCommitCharacters=e&&e.completionItem&&!!e.completionItem.commitCharactersSupport}return this.supportsCommitCharacters}})(),function(){function JSONHover(e,t,r){void 0===t&&(t=[]),this.schemaService=e,this.contributions=t,this.promise=r||Promise}JSONHover.prototype.doHover=function(e,t,r){var n=e.offsetAt(t),i=r.getNodeFromOffset(n);if(!i||("object"===i.type||"array"===i.type)&&n>i.offset+1&&n<i.offset+i.length-1)return this.promise.resolve(null);var o=i;if("string"===i.type){var a=i.parent;if(a&&"property"===a.type&&a.keyNode===i&&!(i=a.valueNode))return this.promise.resolve(null)}for(var c=s.create(e.positionAt(o.offset),e.positionAt(o.offset+o.length)),createHover=function(e){return{contents:e,range:c}},u=jsonParser_getNodePath(i),l=this.contributions.length-1;l>=0;l--){var f=this.contributions[l].getInfoContribution(e.uri,u);if(f)return f.then((function(e){return createHover(e)}))}return this.schemaService.getSchemaForResource(e.uri,r).then((function(e){if(e&&i){var t=r.getMatchingSchemas(e.schema,i.offset),n=void 0,o=void 0,a=void 0,s=void 0;t.every((function(e){if(e.node===i&&!e.inverted&&e.schema&&(n=n||e.schema.title,o=o||e.schema.markdownDescription||toMarkdown(e.schema.description),e.schema.enum)){var t=e.schema.enum.indexOf(jsonParser_getNodeValue(i));e.schema.markdownEnumDescriptions?a=e.schema.markdownEnumDescriptions[t]:e.schema.enumDescriptions&&(a=toMarkdown(e.schema.enumDescriptions[t])),a&&"string"!=typeof(s=e.schema.enum[t])&&(s=JSON.stringify(s))}return!0}));var c="";return n&&(c=toMarkdown(n)),o&&(c.length>0&&(c+="\n\n"),c+=o),a&&(c.length>0&&(c+="\n\n"),c+="`"+function toMarkdownCodeBlock(e){if(-1!==e.indexOf("`"))return"`` "+e+" ``";return e}(s)+"`: "+a),createHover([c])}return null}))}}();function toMarkdown(e){if(e)return e.replace(/([^\n\r])(\r?\n)([^\n\r])/gm,"$1\n\n$3").replace(/[\\`*_{}[\]()#+\-.!]/g,"\\$&")}var Ce,ke,Ae=function(){var extendStatics=function(e,t){return extendStatics=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},extendStatics(e,t)};return function(e,t){function __(){this.constructor=e}extendStatics(e,t),e.prototype=null===t?Object.create(t):(__.prototype=t.prototype,new __)}}();if("object"==typeof process)ke="win32"===process.platform;else if("object"==typeof navigator){var Oe=navigator.userAgent;ke=Oe.indexOf("Windows")>=0}var Ne=/^\w[\w\d+.-]*$/,Te=/^\//,we=/^\/\//;var Ie="",Ee="/",je=/^(([^:/?#]+?):)?(\/\/([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?/,Pe=function(){function URI(e,t,r,n,i,o){void 0===o&&(o=!1),"object"==typeof e?(this.scheme=e.scheme||Ie,this.authority=e.authority||Ie,this.path=e.path||Ie,this.query=e.query||Ie,this.fragment=e.fragment||Ie):(this.scheme=function _schemeFix(e,t){return e||t?e:"file"}(e,o),this.authority=t||Ie,this.path=function _referenceResolution(e,t){switch(e){case"https":case"http":case"file":t?t[0]!==Ee&&(t=Ee+t):t=Ee}return t}(this.scheme,r||Ie),this.query=n||Ie,this.fragment=i||Ie,function _validateUri(e,t){if(!e.scheme&&t)throw new Error('[UriError]: Scheme is missing: {scheme: "", authority: "'+e.authority+'", path: "'+e.path+'", query: "'+e.query+'", fragment: "'+e.fragment+'"}');if(e.scheme&&!Ne.test(e.scheme))throw new Error("[UriError]: Scheme contains illegal characters.");if(e.path)if(e.authority){if(!Te.test(e.path))throw new Error('[UriError]: If a URI contains an authority component, then the path component must either be empty or begin with a slash ("/") character')}else if(we.test(e.path))throw new Error('[UriError]: If a URI does not contain an authority component, then the path cannot begin with two slash characters ("//")')}(this,o))}return URI.isUri=function(e){return e instanceof URI||!!e&&("string"==typeof e.authority&&"string"==typeof e.fragment&&"string"==typeof e.path&&"string"==typeof e.query&&"string"==typeof e.scheme&&"function"==typeof e.fsPath&&"function"==typeof e.with&&"function"==typeof e.toString)},Object.defineProperty(URI.prototype,"fsPath",{get:function(){return uriToFsPath(this,!1)},enumerable:!0,configurable:!0}),URI.prototype.with=function(e){if(!e)return this;var t=e.scheme,r=e.authority,n=e.path,i=e.query,o=e.fragment;return void 0===t?t=this.scheme:null===t&&(t=Ie),void 0===r?r=this.authority:null===r&&(r=Ie),void 0===n?n=this.path:null===n&&(n=Ie),void 0===i?i=this.query:null===i&&(i=Ie),void 0===o?o=this.fragment:null===o&&(o=Ie),t===this.scheme&&r===this.authority&&n===this.path&&i===this.query&&o===this.fragment?this:new Me(t,r,n,i,o)},URI.parse=function(e,t){void 0===t&&(t=!1);var r=je.exec(e);return r?new Me(r[2]||Ie,percentDecode(r[4]||Ie),percentDecode(r[5]||Ie),percentDecode(r[7]||Ie),percentDecode(r[9]||Ie),t):new Me(Ie,Ie,Ie,Ie,Ie)},URI.file=function(e){var t=Ie;if(ke&&(e=e.replace(/\\/g,Ee)),e[0]===Ee&&e[1]===Ee){var r=e.indexOf(Ee,2);-1===r?(t=e.substring(2),e=Ee):(t=e.substring(2,r),e=e.substring(r)||Ee)}return new Me("file",t,e,Ie,Ie)},URI.from=function(e){return new Me(e.scheme,e.authority,e.path,e.query,e.fragment)},URI.prototype.toString=function(e){return void 0===e&&(e=!1),_asFormatted(this,e)},URI.prototype.toJSON=function(){return this},URI.revive=function(e){if(e){if(e instanceof URI)return e;var t=new Me(e);return t._formatted=e.external,t._fsPath=e._sep===_e?e.fsPath:null,t}return e},URI}(),_e=ke?1:void 0,Me=function(e){function _URI(){var t=null!==e&&e.apply(this,arguments)||this;return t._formatted=null,t._fsPath=null,t}return Ae(_URI,e),Object.defineProperty(_URI.prototype,"fsPath",{get:function(){return this._fsPath||(this._fsPath=uriToFsPath(this,!1)),this._fsPath},enumerable:!0,configurable:!0}),_URI.prototype.toString=function(e){return void 0===e&&(e=!1),e?_asFormatted(this,!0):(this._formatted||(this._formatted=_asFormatted(this,!1)),this._formatted)},_URI.prototype.toJSON=function(){var e={$mid:1};return this._fsPath&&(e.fsPath=this._fsPath,e._sep=_e),this._formatted&&(e.external=this._formatted),this.path&&(e.path=this.path),this.scheme&&(e.scheme=this.scheme),this.authority&&(e.authority=this.authority),this.query&&(e.query=this.query),this.fragment&&(e.fragment=this.fragment),e},_URI}(Pe),De=((Ce={})[58]="%3A",Ce[47]="%2F",Ce[63]="%3F",Ce[35]="%23",Ce[91]="%5B",Ce[93]="%5D",Ce[64]="%40",Ce[33]="%21",Ce[36]="%24",Ce[38]="%26",Ce[39]="%27",Ce[40]="%28",Ce[41]="%29",Ce[42]="%2A",Ce[43]="%2B",Ce[44]="%2C",Ce[59]="%3B",Ce[61]="%3D",Ce[32]="%20",Ce);function encodeURIComponentFast(e,t){for(var r=void 0,n=-1,i=0;i<e.length;i++){var o=e.charCodeAt(i);if(o>=97&&o<=122||o>=65&&o<=90||o>=48&&o<=57||45===o||46===o||95===o||126===o||t&&47===o)-1!==n&&(r+=encodeURIComponent(e.substring(n,i)),n=-1),void 0!==r&&(r+=e.charAt(i));else{void 0===r&&(r=e.substr(0,i));var a=De[o];void 0!==a?(-1!==n&&(r+=encodeURIComponent(e.substring(n,i)),n=-1),r+=a):-1===n&&(n=i)}}return-1!==n&&(r+=encodeURIComponent(e.substring(n))),void 0!==r?r:e}function encodeURIComponentMinimal(e){for(var t=void 0,r=0;r<e.length;r++){var n=e.charCodeAt(r);35===n||63===n?(void 0===t&&(t=e.substr(0,r)),t+=De[n]):void 0!==t&&(t+=e[r])}return void 0!==t?t:e}function uriToFsPath(e,t){var r;return r=e.authority&&e.path.length>1&&"file"===e.scheme?"//"+e.authority+e.path:47===e.path.charCodeAt(0)&&(e.path.charCodeAt(1)>=65&&e.path.charCodeAt(1)<=90||e.path.charCodeAt(1)>=97&&e.path.charCodeAt(1)<=122)&&58===e.path.charCodeAt(2)?t?e.path.substr(1):e.path[1].toLowerCase()+e.path.substr(2):e.path,ke&&(r=r.replace(/\//g,"\\")),r}function _asFormatted(e,t){var r=t?encodeURIComponentMinimal:encodeURIComponentFast,n="",i=e.scheme,o=e.authority,a=e.path,s=e.query,c=e.fragment;if(i&&(n+=i,n+=":"),(o||"file"===i)&&(n+=Ee,n+=Ee),o){var u=o.indexOf("@");if(-1!==u){var l=o.substr(0,u);o=o.substr(u+1),-1===(u=l.indexOf(":"))?n+=r(l,!1):(n+=r(l.substr(0,u),!1),n+=":",n+=r(l.substr(u+1),!1)),n+="@"}-1===(u=(o=o.toLowerCase()).indexOf(":"))?n+=r(o,!1):(n+=r(o.substr(0,u),!1),n+=o.substr(u))}if(a){if(a.length>=3&&47===a.charCodeAt(0)&&58===a.charCodeAt(2))(f=a.charCodeAt(1))>=65&&f<=90&&(a="/"+String.fromCharCode(f+32)+":"+a.substr(3));else if(a.length>=2&&58===a.charCodeAt(1)){var f;(f=a.charCodeAt(0))>=65&&f<=90&&(a=String.fromCharCode(f+32)+":"+a.substr(2))}n+=r(a,!0)}return s&&(n+="?",n+=r(s,!1)),c&&(n+="#",n+=t?c:encodeURIComponentFast(c,!1)),n}function decodeURIComponentGraceful(e){try{return decodeURIComponent(e)}catch(t){return e.length>3?e.substr(0,3)+decodeURIComponentGraceful(e.substr(3)):e}}var Fe=/(%[0-9A-Za-z][0-9A-Za-z])+/g;function percentDecode(e){return e.match(Fe)?e.replace(Fe,(function(e){return decodeURIComponentGraceful(e)})):e}var Re=loadMessageBundle(),Ve=function(){function FilePatternAssociation(e,t){this.patternRegExps=[],this.isInclude=[];try{for(var r=0,n=e;r<n.length;r++){var i=n[r],o="!"!==i[0];o||(i=i.substring(1)),this.patternRegExps.push(new RegExp(convertSimple2RegExpPattern(i)+"$")),this.isInclude.push(o)}this.uris=t}catch(e){this.patternRegExps.length=0,this.isInclude.length=0,this.uris=[]}}return FilePatternAssociation.prototype.matchesPattern=function(e){for(var t=!1,r=0;r<this.patternRegExps.length;r++){this.patternRegExps[r].test(e)&&(t=this.isInclude[r])}return t},FilePatternAssociation.prototype.getURIs=function(){return this.uris},FilePatternAssociation}(),Le=function(){function SchemaHandle(e,t,r){this.service=e,this.url=t,this.dependencies={},r&&(this.unresolvedSchema=this.service.promise.resolve(new We(r)))}return SchemaHandle.prototype.getUnresolvedSchema=function(){return this.unresolvedSchema||(this.unresolvedSchema=this.service.loadSchema(this.url)),this.unresolvedSchema},SchemaHandle.prototype.getResolvedSchema=function(){var e=this;return this.resolvedSchema||(this.resolvedSchema=this.getUnresolvedSchema().then((function(t){return e.service.resolveSchemaContent(t,e.url,e.dependencies)}))),this.resolvedSchema},SchemaHandle.prototype.clearSchema=function(){this.resolvedSchema=void 0,this.unresolvedSchema=void 0,this.dependencies={}},SchemaHandle}(),We=function We(e,t){void 0===t&&(t=[]),this.schema=e,this.errors=t},$e=function(){function ResolvedSchema(e,t){void 0===t&&(t=[]),this.schema=e,this.errors=t}return ResolvedSchema.prototype.getSection=function(e){var t=this.getSectionRecursive(e,this.schema);if(t)return asSchema(t)},ResolvedSchema.prototype.getSectionRecursive=function(e,t){if(!t||"boolean"==typeof t||0===e.length)return t;var r=e.shift();if(t.properties&&(t.properties[r],1))return this.getSectionRecursive(e,t.properties[r]);if(t.patternProperties)for(var n=0,i=Object.keys(t.patternProperties);n<i.length;n++){var o=i[n];if(new RegExp(o).test(r))return this.getSectionRecursive(e,t.patternProperties[o])}else{if("object"==typeof t.additionalProperties)return this.getSectionRecursive(e,t.additionalProperties);if(r.match("[0-9]+"))if(Array.isArray(t.items)){var a=parseInt(r,10);if(!isNaN(a)&&t.items[a])return this.getSectionRecursive(e,t.items[a])}else if(t.items)return this.getSectionRecursive(e,t.items)}},ResolvedSchema}(),Je=(function(){function JSONSchemaService(e,t,r){this.contextService=t,this.requestService=e,this.promiseConstructor=r||Promise,this.callOnDispose=[],this.contributionSchemas={},this.contributionAssociations=[],this.schemasById={},this.filePatternAssociations=[],this.registeredSchemasIds={}}JSONSchemaService.prototype.getRegisteredSchemaIds=function(e){return Object.keys(this.registeredSchemasIds).filter((function(t){var r=Pe.parse(t).scheme;return"schemaservice"!==r&&(!e||e(r))}))},Object.defineProperty(JSONSchemaService.prototype,"promise",{get:function(){return this.promiseConstructor},enumerable:!1,configurable:!0}),JSONSchemaService.prototype.dispose=function(){for(;this.callOnDispose.length>0;)this.callOnDispose.pop()()},JSONSchemaService.prototype.onResourceChange=function(e){for(var t=this,r=!1,n=[e=normalizeId(e)],i=Object.keys(this.schemasById).map((function(e){return t.schemasById[e]}));n.length;)for(var o=n.pop(),a=0;a<i.length;a++){var s=i[a];s&&(s.url===o||s.dependencies[o])&&(s.url!==o&&n.push(s.url),s.clearSchema(),i[a]=void 0,r=!0)}return r},JSONSchemaService.prototype.setSchemaContributions=function(e){if(e.schemas){var t=e.schemas;for(var r in t){var n=normalizeId(r);this.contributionSchemas[n]=this.addSchemaHandle(n,t[r])}}if(Array.isArray(e.schemaAssociations))for(var i=0,o=e.schemaAssociations;i<o.length;i++){var a=o[i],s=a.uris.map(normalizeId),c=this.addFilePatternAssociation(a.pattern,s);this.contributionAssociations.push(c)}},JSONSchemaService.prototype.addSchemaHandle=function(e,t){var r=new Le(this,e,t);return this.schemasById[e]=r,r},JSONSchemaService.prototype.getOrAddSchemaHandle=function(e,t){return this.schemasById[e]||this.addSchemaHandle(e,t)},JSONSchemaService.prototype.addFilePatternAssociation=function(e,t){var r=new Ve(e,t);return this.filePatternAssociations.push(r),r},JSONSchemaService.prototype.registerExternalSchema=function(e,t,r){var n=normalizeId(e);return this.registeredSchemasIds[n]=!0,this.cachedSchemaForResource=void 0,t&&this.addFilePatternAssociation(t,[e]),r?this.addSchemaHandle(n,r):this.getOrAddSchemaHandle(n)},JSONSchemaService.prototype.clearExternalSchemas=function(){for(var e in this.schemasById={},this.filePatternAssociations=[],this.registeredSchemasIds={},this.cachedSchemaForResource=void 0,this.contributionSchemas)this.schemasById[e]=this.contributionSchemas[e],this.registeredSchemasIds[e]=!0;for(var t=0,r=this.contributionAssociations;t<r.length;t++){var n=r[t];this.filePatternAssociations.push(n)}},JSONSchemaService.prototype.getResolvedSchema=function(e){var t=normalizeId(e),r=this.schemasById[t];return r?r.getResolvedSchema():this.promise.resolve(void 0)},JSONSchemaService.prototype.loadSchema=function(e){if(!this.requestService){var t=Re("json.schema.norequestservice","Unable to load schema from '{0}'. No schema request service available",toDisplayString(e));return this.promise.resolve(new We({},[t]))}return this.requestService(e).then((function(t){if(!t){var r=Re("json.schema.nocontent","Unable to load schema from '{0}': No content.",toDisplayString(e));return new We({},[r])}var n,i=[];n=T(t,i);var o=i.length?[Re("json.schema.invalidFormat","Unable to parse content from '{0}': Parse error at offset {1}.",toDisplayString(e),i[0].offset)]:[];return new We(n,o)}),(function(t){var r=t.toString(),n=t.toString().split("Error: ");return n.length>1&&(r=n[1]),endsWith(r,".")&&(r=r.substr(0,r.length-1)),new We({},[Re("json.schema.nocontent","Unable to load schema from '{0}': {1}.",toDisplayString(e),r)])}))},JSONSchemaService.prototype.resolveSchemaContent=function(e,t,r){var n=this,i=e.errors.slice(0),o=e.schema;if(o.$schema){var a=normalizeId(o.$schema);if("http://json-schema.org/draft-03/schema"===a)return this.promise.resolve(new $e({},[Re("json.schema.draft03.notsupported","Draft-03 schemas are not supported.")]));"https://json-schema.org/draft/2019-09/schema"===a&&i.push(Re("json.schema.draft201909.notsupported","Draft 2019-09 schemas are not yet fully supported."))}var s=this.contextService,merge=function(e,t,r,n){var o=n?decodeURIComponent(n):void 0,a=function(e,t){if(!t)return e;var r=e;return"/"===t[0]&&(t=t.substr(1)),t.split("/").some((function(e){return!(r=r[e])})),r}(t,o);if(a)for(var s in a)a.hasOwnProperty(s)&&!e.hasOwnProperty(s)&&(e[s]=a[s]);else i.push(Re("json.schema.invalidref","$ref '{0}' in '{1}' can not be resolved.",o,r))},resolveExternalLink=function(e,t,r,o,a){s&&!/^\w+:\/\/.*/.test(t)&&(t=s.resolveRelativePath(t,o)),t=normalizeId(t);var c=n.getOrAddSchemaHandle(t);return c.getUnresolvedSchema().then((function(n){if(a[t]=!0,n.errors.length){var o=r?t+"#"+r:t;i.push(Re("json.schema.problemloadingref","Problems loading reference '{0}': {1}",o,n.errors[0]))}return merge(e,n.schema,t,r),resolveRefs(e,n.schema,t,c.dependencies)}))},resolveRefs=function(e,t,r,i){if(!e||"object"!=typeof e)return Promise.resolve(null);for(var o=[e],a=[],s=[],handleRef=function(e){for(var n=[];e.$ref;){var a=e.$ref,c=a.split("#",2);if(delete e.$ref,c[0].length>0)return void s.push(resolveExternalLink(e,c[0],c[1],r,i));-1===n.indexOf(a)&&(merge(e,t,r,c[1]),n.push(a))}!function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];for(var r=0,n=e;r<n.length;r++){var i=n[r];"object"==typeof i&&o.push(i)}}(e.items,e.additionalItems,e.additionalProperties,e.not,e.contains,e.propertyNames,e.if,e.then,e.else),function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];for(var r=0,n=e;r<n.length;r++){var i=n[r];if("object"==typeof i)for(var a in i){var s=i[a];"object"==typeof s&&o.push(s)}}}(e.definitions,e.properties,e.patternProperties,e.dependencies),function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];for(var r=0,n=e;r<n.length;r++){var i=n[r];if(Array.isArray(i))for(var a=0,s=i;a<s.length;a++){var c=s[a];"object"==typeof c&&o.push(c)}}}(e.anyOf,e.allOf,e.oneOf,e.items)};o.length;){var c=o.pop();a.indexOf(c)>=0||(a.push(c),handleRef(c))}return n.promise.all(s)};return resolveRefs(o,o,t,r).then((function(e){return new $e(o,i)}))},JSONSchemaService.prototype.getSchemaForResource=function(e,t){if(t&&t.root&&"object"===t.root.type){var r=t.root.properties.filter((function(e){return"$schema"===e.keyNode.value&&e.valueNode&&"string"===e.valueNode.type}));if(r.length>0){var n=r[0].valueNode;if(n&&"string"===n.type){var i=jsonParser_getNodeValue(n);if(i&&function startsWith(e,t){if(e.length<t.length)return!1;for(var r=0;r<t.length;r++)if(e[r]!==t[r])return!1;return!0}(i,".")&&this.contextService&&(i=this.contextService.resolveRelativePath(i,e)),i){var o=normalizeId(i);return this.getOrAddSchemaHandle(o).getResolvedSchema()}}}}if(this.cachedSchemaForResource&&this.cachedSchemaForResource.resource===e)return this.cachedSchemaForResource.resolvedSchema;for(var a=Object.create(null),s=[],c=0,u=this.filePatternAssociations;c<u.length;c++){var l=u[c];if(l.matchesPattern(e))for(var f=0,h=l.getURIs();f<h.length;f++){var p=h[f];a[p]||(s.push(p),a[p]=!0)}}var m=s.length>0?this.createCombinedSchema(e,s).getResolvedSchema():this.promise.resolve(void 0);return this.cachedSchemaForResource={resource:e,resolvedSchema:m},m},JSONSchemaService.prototype.createCombinedSchema=function(e,t){if(1===t.length)return this.getOrAddSchemaHandle(t[0]);var r="schemaservice://combinedSchema/"+encodeURIComponent(e),n={allOf:t.map((function(e){return{$ref:e}}))};return this.addSchemaHandle(r,n)},JSONSchemaService.prototype.getMatchingSchemas=function(e,t,r){if(r){var n=r.id||"schemaservice://untitled/matchingSchemas/"+Je++;return this.resolveSchemaContent(new We(r),n,{}).then((function(e){return t.getMatchingSchemas(e.schema).filter((function(e){return!e.inverted}))}))}return this.getSchemaForResource(e.uri,t).then((function(e){return e?t.getMatchingSchemas(e.schema).filter((function(e){return!e.inverted})):[]}))}}(),0);function normalizeId(e){try{return Pe.parse(e).toString()}catch(t){return e}}function toDisplayString(e){try{var t=Pe.parse(e);if("file"===t.scheme)return t.fsPath}catch(e){}return e}var Ue=loadMessageBundle(),qe=(function(){function JSONValidation(e,t){this.jsonSchemaService=e,this.promise=t,this.validationEnabled=!0}JSONValidation.prototype.configure=function(e){e&&(this.validationEnabled=e.validate,this.commentSeverity=e.allowComments?void 0:g.Error)},JSONValidation.prototype.doValidation=function(e,t,r,n){var i=this;if(!this.validationEnabled)return this.promise.resolve([]);var o=[],a={},addProblem=function(e){var t=e.range.start.line+" "+e.range.start.character+" "+e.message;a[t]||(a[t]=!0,o.push(e))},getDiagnostics=function(n){var a=r?toDiagnosticSeverity(r.trailingCommas):g.Error,c=r?toDiagnosticSeverity(r.comments):i.commentSeverity;if(n){if(n.errors.length&&t.root){var u=t.root,l="object"===u.type?u.properties[0]:void 0;if(l&&"$schema"===l.keyNode.value){var f=l.valueNode||l,h=s.create(e.positionAt(f.offset),e.positionAt(f.offset+f.length));addProblem(y.create(h,n.errors[0],g.Warning,ue.SchemaResolveError))}else{h=s.create(e.positionAt(u.offset),e.positionAt(u.offset+1));addProblem(y.create(h,n.errors[0],g.Warning,ue.SchemaResolveError))}}else{var p=t.validate(e,n.schema);p&&p.forEach(addProblem)}schemaAllowsComments(n.schema)&&(c=void 0),schemaAllowsTrailingCommas(n.schema)&&(a=void 0)}for(var m=0,d=t.syntaxErrors;m<d.length;m++){var v=d[m];if(v.code===ue.TrailingComma){if("number"!=typeof a)continue;v.severity=a}addProblem(v)}if("number"==typeof c){var b=Ue("InvalidCommentToken","Comments are not permitted in JSON.");t.comments.forEach((function(e){addProblem(y.create(e,b,c,ue.CommentNotPermitted))}))}return o};if(n){var c=n.id||"schemaservice://untitled/"+qe++;return this.jsonSchemaService.resolveSchemaContent(new We(n),c,{}).then((function(e){return getDiagnostics(e)}))}return this.jsonSchemaService.getSchemaForResource(e.uri,t).then((function(e){return getDiagnostics(e)}))}}(),0);function schemaAllowsComments(e){if(e&&"object"==typeof e){if(isBoolean(e.allowComments))return e.allowComments;if(e.allOf)for(var t=0,r=e.allOf;t<r.length;t++){var n=schemaAllowsComments(r[t]);if(isBoolean(n))return n}}}function schemaAllowsTrailingCommas(e){if(e&&"object"==typeof e){if(isBoolean(e.allowTrailingCommas))return e.allowTrailingCommas;var t=e;if(isBoolean(t.allowsTrailingCommas))return t.allowsTrailingCommas;if(e.allOf)for(var r=0,n=e.allOf;r<n.length;r++){var i=schemaAllowsTrailingCommas(n[r]);if(isBoolean(i))return i}}}function toDiagnosticSeverity(e){switch(e){case"error":return g.Error;case"warning":return g.Warning;case"ignore":return}}var Be=48,He=57,Ke=65,ze=97,Ge=102;function hexDigit(e){return e<Be?0:e<=He?e-Be:(e<ze&&(e+=ze-Ke),e>=ze&&e<=Ge?e-ze+10:0)}function colorFromHex(e){if("#"===e[0])switch(e.length){case 4:return{red:17*hexDigit(e.charCodeAt(1))/255,green:17*hexDigit(e.charCodeAt(2))/255,blue:17*hexDigit(e.charCodeAt(3))/255,alpha:1};case 5:return{red:17*hexDigit(e.charCodeAt(1))/255,green:17*hexDigit(e.charCodeAt(2))/255,blue:17*hexDigit(e.charCodeAt(3))/255,alpha:17*hexDigit(e.charCodeAt(4))/255};case 7:return{red:(16*hexDigit(e.charCodeAt(1))+hexDigit(e.charCodeAt(2)))/255,green:(16*hexDigit(e.charCodeAt(3))+hexDigit(e.charCodeAt(4)))/255,blue:(16*hexDigit(e.charCodeAt(5))+hexDigit(e.charCodeAt(6)))/255,alpha:1};case 9:return{red:(16*hexDigit(e.charCodeAt(1))+hexDigit(e.charCodeAt(2)))/255,green:(16*hexDigit(e.charCodeAt(3))+hexDigit(e.charCodeAt(4)))/255,blue:(16*hexDigit(e.charCodeAt(5))+hexDigit(e.charCodeAt(6)))/255,alpha:(16*hexDigit(e.charCodeAt(7))+hexDigit(e.charCodeAt(8)))/255}}}!function(){function JSONDocumentSymbols(e){this.schemaService=e}JSONDocumentSymbols.prototype.findDocumentSymbols=function(e,t,r){var n=this;void 0===r&&(r={resultLimit:Number.MAX_VALUE});var i=t.root;if(!i)return[];var o=r.resultLimit||Number.MAX_VALUE,a=e.uri;if(("vscode://defaultsettings/keybindings.json"===a||endsWith(a.toLowerCase(),"/user/keybindings.json"))&&"array"===i.type){for(var s=[],u=0,l=i.items;u<l.length;u++){var f=l[u];if("object"===f.type)for(var h=0,p=f.properties;h<p.length;h++){var m=p[h];if("key"===m.keyNode.value&&m.valueNode){var d=c.create(e.uri,getRange(e,f));if(s.push({name:jsonParser_getNodeValue(m.valueNode),kind:K.Function,location:d}),--o<=0)return r&&r.onResultLimitExceeded&&r.onResultLimitExceeded(a),s}}}return s}for(var g=[{node:i,containerName:""}],v=0,y=!1,b=[],collectOutlineEntries=function(t,r){"array"===t.type?t.items.forEach((function(e){e&&g.push({node:e,containerName:r})})):"object"===t.type&&t.properties.forEach((function(t){var i=t.valueNode;if(i)if(o>0){o--;var a=c.create(e.uri,getRange(e,t)),s=r?r+"."+t.keyNode.value:t.keyNode.value;b.push({name:n.getKeyLabel(t),kind:n.getSymbolKind(i.type),location:a,containerName:r}),g.push({node:i,containerName:s})}else y=!0}))};v<g.length;){var S=g[v++];collectOutlineEntries(S.node,S.containerName)}return y&&r&&r.onResultLimitExceeded&&r.onResultLimitExceeded(a),b},JSONDocumentSymbols.prototype.findDocumentSymbols2=function(e,t,r){var n=this;void 0===r&&(r={resultLimit:Number.MAX_VALUE});var i=t.root;if(!i)return[];var o=r.resultLimit||Number.MAX_VALUE,a=e.uri;if(("vscode://defaultsettings/keybindings.json"===a||endsWith(a.toLowerCase(),"/user/keybindings.json"))&&"array"===i.type){for(var s=[],c=0,u=i.items;c<u.length;c++){var l=u[c];if("object"===l.type)for(var f=0,h=l.properties;f<h.length;f++){var p=h[f];if("key"===p.keyNode.value&&p.valueNode){var m=getRange(e,l),d=getRange(e,p.keyNode);if(s.push({name:jsonParser_getNodeValue(p.valueNode),kind:K.Function,range:m,selectionRange:d}),--o<=0)return r&&r.onResultLimitExceeded&&r.onResultLimitExceeded(a),s}}}return s}for(var g=[],v=[{node:i,result:g}],y=0,b=!1,collectOutlineEntries=function(t,r){"array"===t.type?t.items.forEach((function(t,i){if(t)if(o>0){o--;var a=getRange(e,t),s=a,c={name:String(i),kind:n.getSymbolKind(t.type),range:a,selectionRange:s,children:[]};r.push(c),v.push({result:c.children,node:t})}else b=!0})):"object"===t.type&&t.properties.forEach((function(t){var i=t.valueNode;if(i)if(o>0){o--;var a=getRange(e,t),s=getRange(e,t.keyNode),c={name:n.getKeyLabel(t),kind:n.getSymbolKind(i.type),range:a,selectionRange:s,children:[]};r.push(c),v.push({result:c.children,node:i})}else b=!0}))};y<v.length;){var S=v[y++];collectOutlineEntries(S.node,S.result)}return b&&r&&r.onResultLimitExceeded&&r.onResultLimitExceeded(a),g},JSONDocumentSymbols.prototype.getSymbolKind=function(e){switch(e){case"object":return K.Module;case"string":return K.String;case"number":return K.Number;case"array":return K.Array;case"boolean":return K.Boolean;default:return K.Variable}},JSONDocumentSymbols.prototype.getKeyLabel=function(e){var t=e.keyNode.value;return t&&(t=t.replace(/[\n]/g,"↵")),t&&t.trim()?t:'"'+t+'"'},JSONDocumentSymbols.prototype.findDocumentColors=function(e,t,r){return this.schemaService.getSchemaForResource(e.uri,t).then((function(n){var i=[];if(n)for(var o=r&&"number"==typeof r.resultLimit?r.resultLimit:Number.MAX_VALUE,a={},s=0,c=t.getMatchingSchemas(n.schema);s<c.length;s++){var u=c[s];if(!u.inverted&&u.schema&&("color"===u.schema.format||"color-hex"===u.schema.format)&&u.node&&"string"===u.node.type){var l=String(u.node.offset);if(!a[l]){var f=colorFromHex(jsonParser_getNodeValue(u.node));if(f){var h=getRange(e,u.node);i.push({color:f,range:h})}if(a[l]=!0,--o<=0)return r&&r.onResultLimitExceeded&&r.onResultLimitExceeded(e.uri),i}}}return i}))},JSONDocumentSymbols.prototype.getColorPresentations=function(e,t,r,n){var i,o=[],a=Math.round(255*r.red),s=Math.round(255*r.green),c=Math.round(255*r.blue);function toTwoDigitHex(e){var t=e.toString(16);return 2!==t.length?"0"+t:t}return i=1===r.alpha?"#"+toTwoDigitHex(a)+toTwoDigitHex(s)+toTwoDigitHex(c):"#"+toTwoDigitHex(a)+toTwoDigitHex(s)+toTwoDigitHex(c)+toTwoDigitHex(Math.round(255*r.alpha)),o.push({label:i,textEdit:S.replace(n,JSON.stringify(i))}),o}}();function getRange(e,t){return s.create(e.positionAt(t.offset),e.positionAt(t.offset+t.length))}var Ze=loadMessageBundle(),Xe={schemaAssociations:[],schemas:{"http://json-schema.org/schema#":{$ref:"http://json-schema.org/draft-07/schema#"},"http://json-schema.org/draft-04/schema#":{title:Ze("schema.json","Describes a JSON file using a schema. See json-schema.org for more info."),$schema:"http://json-schema.org/draft-04/schema#",definitions:{schemaArray:{type:"array",minItems:1,items:{$ref:"#"}},positiveInteger:{type:"integer",minimum:0},positiveIntegerDefault0:{allOf:[{$ref:"#/definitions/positiveInteger"},{default:0}]},simpleTypes:{type:"string",enum:["array","boolean","integer","null","number","object","string"]},stringArray:{type:"array",items:{type:"string"},minItems:1,uniqueItems:!0}},type:"object",properties:{id:{type:"string",format:"uri"},$schema:{type:"string",format:"uri"},title:{type:"string"},description:{type:"string"},default:{},multipleOf:{type:"number",minimum:0,exclusiveMinimum:!0},maximum:{type:"number"},exclusiveMaximum:{type:"boolean",default:!1},minimum:{type:"number"},exclusiveMinimum:{type:"boolean",default:!1},maxLength:{allOf:[{$ref:"#/definitions/positiveInteger"}]},minLength:{allOf:[{$ref:"#/definitions/positiveIntegerDefault0"}]},pattern:{type:"string",format:"regex"},additionalItems:{anyOf:[{type:"boolean"},{$ref:"#"}],default:{}},items:{anyOf:[{$ref:"#"},{$ref:"#/definitions/schemaArray"}],default:{}},maxItems:{allOf:[{$ref:"#/definitions/positiveInteger"}]},minItems:{allOf:[{$ref:"#/definitions/positiveIntegerDefault0"}]},uniqueItems:{type:"boolean",default:!1},maxProperties:{allOf:[{$ref:"#/definitions/positiveInteger"}]},minProperties:{allOf:[{$ref:"#/definitions/positiveIntegerDefault0"}]},required:{allOf:[{$ref:"#/definitions/stringArray"}]},additionalProperties:{anyOf:[{type:"boolean"},{$ref:"#"}],default:{}},definitions:{type:"object",additionalProperties:{$ref:"#"},default:{}},properties:{type:"object",additionalProperties:{$ref:"#"},default:{}},patternProperties:{type:"object",additionalProperties:{$ref:"#"},default:{}},dependencies:{type:"object",additionalProperties:{anyOf:[{$ref:"#"},{$ref:"#/definitions/stringArray"}]}},enum:{type:"array",minItems:1,uniqueItems:!0},type:{anyOf:[{$ref:"#/definitions/simpleTypes"},{type:"array",items:{$ref:"#/definitions/simpleTypes"},minItems:1,uniqueItems:!0}]},format:{anyOf:[{type:"string",enum:["date-time","uri","email","hostname","ipv4","ipv6","regex"]},{type:"string"}]},allOf:{allOf:[{$ref:"#/definitions/schemaArray"}]},anyOf:{allOf:[{$ref:"#/definitions/schemaArray"}]},oneOf:{allOf:[{$ref:"#/definitions/schemaArray"}]},not:{allOf:[{$ref:"#"}]}},dependencies:{exclusiveMaximum:["maximum"],exclusiveMinimum:["minimum"]},default:{}},"http://json-schema.org/draft-07/schema#":{title:Ze("schema.json","Describes a JSON file using a schema. See json-schema.org for more info."),definitions:{schemaArray:{type:"array",minItems:1,items:{$ref:"#"}},nonNegativeInteger:{type:"integer",minimum:0},nonNegativeIntegerDefault0:{allOf:[{$ref:"#/definitions/nonNegativeInteger"},{default:0}]},simpleTypes:{enum:["array","boolean","integer","null","number","object","string"]},stringArray:{type:"array",items:{type:"string"},uniqueItems:!0,default:[]}},type:["object","boolean"],properties:{$id:{type:"string",format:"uri-reference"},$schema:{type:"string",format:"uri"},$ref:{type:"string",format:"uri-reference"},$comment:{type:"string"},title:{type:"string"},description:{type:"string"},default:!0,readOnly:{type:"boolean",default:!1},examples:{type:"array",items:!0},multipleOf:{type:"number",exclusiveMinimum:0},maximum:{type:"number"},exclusiveMaximum:{type:"number"},minimum:{type:"number"},exclusiveMinimum:{type:"number"},maxLength:{$ref:"#/definitions/nonNegativeInteger"},minLength:{$ref:"#/definitions/nonNegativeIntegerDefault0"},pattern:{type:"string",format:"regex"},additionalItems:{$ref:"#"},items:{anyOf:[{$ref:"#"},{$ref:"#/definitions/schemaArray"}],default:!0},maxItems:{$ref:"#/definitions/nonNegativeInteger"},minItems:{$ref:"#/definitions/nonNegativeIntegerDefault0"},uniqueItems:{type:"boolean",default:!1},contains:{$ref:"#"},maxProperties:{$ref:"#/definitions/nonNegativeInteger"},minProperties:{$ref:"#/definitions/nonNegativeIntegerDefault0"},required:{$ref:"#/definitions/stringArray"},additionalProperties:{$ref:"#"},definitions:{type:"object",additionalProperties:{$ref:"#"},default:{}},properties:{type:"object",additionalProperties:{$ref:"#"},default:{}},patternProperties:{type:"object",additionalProperties:{$ref:"#"},propertyNames:{format:"regex"},default:{}},dependencies:{type:"object",additionalProperties:{anyOf:[{$ref:"#"},{$ref:"#/definitions/stringArray"}]}},propertyNames:{$ref:"#"},const:!0,enum:{type:"array",items:!0,minItems:1,uniqueItems:!0},type:{anyOf:[{$ref:"#/definitions/simpleTypes"},{type:"array",items:{$ref:"#/definitions/simpleTypes"},minItems:1,uniqueItems:!0}]},format:{type:"string"},contentMediaType:{type:"string"},contentEncoding:{type:"string"},if:{$ref:"#"},then:{$ref:"#"},else:{$ref:"#"},allOf:{$ref:"#/definitions/schemaArray"},anyOf:{$ref:"#/definitions/schemaArray"},oneOf:{$ref:"#/definitions/schemaArray"},not:{$ref:"#"}},default:!0}}},Qe={id:Ze("schema.json.id","A unique identifier for the schema."),$schema:Ze("schema.json.$schema","The schema to verify this document against."),title:Ze("schema.json.title","A descriptive title of the element."),description:Ze("schema.json.description","A long description of the element. Used in hover menus and suggestions."),default:Ze("schema.json.default","A default value. Used by suggestions."),multipleOf:Ze("schema.json.multipleOf","A number that should cleanly divide the current value (i.e. have no remainder)."),maximum:Ze("schema.json.maximum","The maximum numerical value, inclusive by default."),exclusiveMaximum:Ze("schema.json.exclusiveMaximum","Makes the maximum property exclusive."),minimum:Ze("schema.json.minimum","The minimum numerical value, inclusive by default."),exclusiveMinimum:Ze("schema.json.exclusiveMininum","Makes the minimum property exclusive."),maxLength:Ze("schema.json.maxLength","The maximum length of a string."),minLength:Ze("schema.json.minLength","The minimum length of a string."),pattern:Ze("schema.json.pattern","A regular expression to match the string against. It is not implicitly anchored."),additionalItems:Ze("schema.json.additionalItems","For arrays, only when items is set as an array. If it is a schema, then this schema validates items after the ones specified by the items array. If it is false, then additional items will cause validation to fail."),items:Ze("schema.json.items","For arrays. Can either be a schema to validate every element against or an array of schemas to validate each item against in order (the first schema will validate the first element, the second schema will validate the second element, and so on."),maxItems:Ze("schema.json.maxItems","The maximum number of items that can be inside an array. Inclusive."),minItems:Ze("schema.json.minItems","The minimum number of items that can be inside an array. Inclusive."),uniqueItems:Ze("schema.json.uniqueItems","If all of the items in the array must be unique. Defaults to false."),maxProperties:Ze("schema.json.maxProperties","The maximum number of properties an object can have. Inclusive."),minProperties:Ze("schema.json.minProperties","The minimum number of properties an object can have. Inclusive."),required:Ze("schema.json.required","An array of strings that lists the names of all properties required on this object."),additionalProperties:Ze("schema.json.additionalProperties","Either a schema or a boolean. If a schema, then used to validate all properties not matched by 'properties' or 'patternProperties'. If false, then any properties not matched by either will cause this schema to fail."),definitions:Ze("schema.json.definitions","Not used for validation. Place subschemas here that you wish to reference inline with $ref."),properties:Ze("schema.json.properties","A map of property names to schemas for each property."),patternProperties:Ze("schema.json.patternProperties","A map of regular expressions on property names to schemas for matching properties."),dependencies:Ze("schema.json.dependencies","A map of property names to either an array of property names or a schema. An array of property names means the property named in the key depends on the properties in the array being present in the object in order to be valid. If the value is a schema, then the schema is only applied to the object if the property in the key exists on the object."),enum:Ze("schema.json.enum","The set of literal values that are valid."),type:Ze("schema.json.type","Either a string of one of the basic schema types (number, integer, null, array, object, boolean, string) or an array of strings specifying a subset of those types."),format:Ze("schema.json.format","Describes the format expected for the value."),allOf:Ze("schema.json.allOf","An array of schemas, all of which must match."),anyOf:Ze("schema.json.anyOf","An array of schemas, where at least one must match."),oneOf:Ze("schema.json.oneOf","An array of schemas, exactly one of which must match."),not:Ze("schema.json.not","A schema which must not match."),$id:Ze("schema.json.$id","A unique identifier for the schema."),$ref:Ze("schema.json.$ref","Reference a definition hosted on any location."),$comment:Ze("schema.json.$comment","Comments from schema authors to readers or maintainers of the schema."),readOnly:Ze("schema.json.readOnly","Indicates that the value of the instance is managed exclusively by the owning authority."),examples:Ze("schema.json.examples","Sample JSON values associated with a particular schema, for the purpose of illustrating usage."),contains:Ze("schema.json.contains",'An array instance is valid against "contains" if at least one of its elements is valid against the given schema.'),propertyNames:Ze("schema.json.propertyNames","If the instance is an object, this keyword validates if every property name in the instance validates against the provided schema."),const:Ze("schema.json.const","An instance validates successfully against this keyword if its value is equal to the value of the keyword."),contentMediaType:Ze("schema.json.contentMediaType","Describes the media type of a string property."),contentEncoding:Ze("schema.json.contentEncoding","Describes the content encoding of a string property."),if:Ze("schema.json.if",'The validation outcome of the "if" subschema controls which of the "then" or "else" keywords are evaluated.'),then:Ze("schema.json.then",'The "if" subschema is used for validation when the "if" subschema succeeds.'),else:Ze("schema.json.else",'The "else" subschema is used for validation when the "if" subschema fails.')};for(var Ye in Xe.schemas){var et=Xe.schemas[Ye];for(var tt in et.properties){var rt=et.properties[tt];"boolean"==typeof rt&&(rt=et.properties[tt]={});var nt=Qe[tt];nt?rt.description=nt:console.log(tt+": localize('schema.json."+tt+'\', "")')}}var it=function(){function DiagnosticsAdapter(e,t,r){var n=this;this._languageId=e,this._worker=t,this._disposables=[],this._listener=Object.create(null);var onModelAdd=function(e){var t,r=e.getModeId();r===n._languageId&&(n._listener[e.uri.toString()]=e.onDidChangeContent((function(){clearTimeout(t),t=setTimeout((function(){return n._doValidate(e.uri,r)}),500)})),n._doValidate(e.uri,r))},onModelRemoved=function(e){i.j6.setModelMarkers(e,n._languageId,[]);var t=e.uri.toString(),r=n._listener[t];r&&(r.dispose(),delete n._listener[t])};this._disposables.push(i.j6.onDidCreateModel(onModelAdd)),this._disposables.push(i.j6.onWillDisposeModel((function(e){onModelRemoved(e),n._resetSchema(e.uri)}))),this._disposables.push(i.j6.onDidChangeModelLanguage((function(e){onModelRemoved(e.model),onModelAdd(e.model),n._resetSchema(e.model.uri)}))),this._disposables.push(r.onDidChange((function(e){i.j6.getModels().forEach((function(e){e.getModeId()===n._languageId&&(onModelRemoved(e),onModelAdd(e))}))}))),this._disposables.push({dispose:function(){for(var e in i.j6.getModels().forEach(onModelRemoved),n._listener)n._listener[e].dispose()}}),i.j6.getModels().forEach(onModelAdd)}return DiagnosticsAdapter.prototype.dispose=function(){this._disposables.forEach((function(e){return e&&e.dispose()})),this._disposables=[]},DiagnosticsAdapter.prototype._resetSchema=function(e){this._worker().then((function(t){t.resetSchema(e.toString())}))},DiagnosticsAdapter.prototype._doValidate=function(e,t){this._worker(e).then((function(r){return r.doValidation(e.toString()).then((function(r){var n=r.map((function(e){return function toDiagnostics(e,t){var r="number"==typeof t.code?String(t.code):t.code;return{severity:toSeverity(t.severity),startLineNumber:t.range.start.line+1,startColumn:t.range.start.character+1,endLineNumber:t.range.end.line+1,endColumn:t.range.end.character+1,message:t.message,code:r,source:t.source}}(0,e)})),o=i.j6.getModel(e);o&&o.getModeId()===t&&i.j6.setModelMarkers(o,t,n)}))})).then(void 0,(function(e){console.error(e)}))},DiagnosticsAdapter}();function toSeverity(e){switch(e){case g.Error:return i.ZL.Error;case g.Warning:return i.ZL.Warning;case g.Information:return i.ZL.Info;case g.Hint:return i.ZL.Hint;default:return i.ZL.Info}}function fromPosition(e){if(e)return{character:e.column-1,line:e.lineNumber-1}}function fromRange(e){if(e)return{start:{line:e.startLineNumber-1,character:e.startColumn-1},end:{line:e.endLineNumber-1,character:e.endColumn-1}}}function toRange(e){if(e)return new i.e6(e.start.line+1,e.start.character+1,e.end.line+1,e.end.character+1)}function toCompletionItemKind(e){var t=i.Mj.CompletionItemKind;switch(e){case F.Text:return t.Text;case F.Method:return t.Method;case F.Function:return t.Function;case F.Constructor:return t.Constructor;case F.Field:return t.Field;case F.Variable:return t.Variable;case F.Class:return t.Class;case F.Interface:return t.Interface;case F.Module:return t.Module;case F.Property:return t.Property;case F.Unit:return t.Unit;case F.Value:return t.Value;case F.Enum:return t.Enum;case F.Keyword:return t.Keyword;case F.Snippet:return t.Snippet;case F.Color:return t.Color;case F.File:return t.File;case F.Reference:return t.Reference}return t.Property}function toTextEdit(e){if(e)return{range:toRange(e.range),text:e.newText}}var ot=function(){function CompletionAdapter(e){this._worker=e}return Object.defineProperty(CompletionAdapter.prototype,"triggerCharacters",{get:function(){return[" ",":"]},enumerable:!1,configurable:!0}),CompletionAdapter.prototype.provideCompletionItems=function(e,t,r,n){var o=e.uri;return this._worker(o).then((function(e){return e.doComplete(o.toString(),fromPosition(t))})).then((function(r){if(r){var n=e.getWordUntilPosition(t),o=new i.e6(t.lineNumber,n.startColumn,t.lineNumber,n.endColumn),a=r.items.map((function(e){var t={label:e.label,insertText:e.insertText||e.label,sortText:e.sortText,filterText:e.filterText,documentation:e.documentation,detail:e.detail,range:o,kind:toCompletionItemKind(e.kind)};return e.textEdit&&(!function isInsertReplaceEdit(e){return void 0!==e.insert&&void 0!==e.replace}(e.textEdit)?t.range=toRange(e.textEdit.range):t.range={insert:toRange(e.textEdit.insert),replace:toRange(e.textEdit.replace)},t.insertText=e.textEdit.newText),e.additionalTextEdits&&(t.additionalTextEdits=e.additionalTextEdits.map(toTextEdit)),e.insertTextFormat===R.Snippet&&(t.insertTextRules=i.Mj.CompletionItemInsertTextRule.InsertAsSnippet),t}));return{isIncomplete:r.isIncomplete,suggestions:a}}}))},CompletionAdapter}();function toMarkdownString(e){return"string"==typeof e?{value:e}:function isMarkupContent(e){return e&&"object"==typeof e&&"string"==typeof e.kind}(e)?"plaintext"===e.kind?{value:e.value.replace(/[\\`*_{}[\]()#+\-.!]/g,"\\$&")}:{value:e.value}:{value:"```"+e.language+"\n"+e.value+"\n```\n"}}function toMarkedStringArray(e){if(e)return Array.isArray(e)?e.map(toMarkdownString):[toMarkdownString(e)]}var at=function(){function HoverAdapter(e){this._worker=e}return HoverAdapter.prototype.provideHover=function(e,t,r){var n=e.uri;return this._worker(n).then((function(e){return e.doHover(n.toString(),fromPosition(t))})).then((function(e){if(e)return{range:toRange(e.range),contents:toMarkedStringArray(e.contents)}}))},HoverAdapter}();function toSymbolKind(e){var t=i.Mj.SymbolKind;switch(e){case K.File:return t.Array;case K.Module:return t.Module;case K.Namespace:return t.Namespace;case K.Package:return t.Package;case K.Class:return t.Class;case K.Method:return t.Method;case K.Property:return t.Property;case K.Field:return t.Field;case K.Constructor:return t.Constructor;case K.Enum:return t.Enum;case K.Interface:return t.Interface;case K.Function:return t.Function;case K.Variable:return t.Variable;case K.Constant:return t.Constant;case K.String:return t.String;case K.Number:return t.Number;case K.Boolean:return t.Boolean;case K.Array:return t.Array}return t.Function}var st=function(){function DocumentSymbolAdapter(e){this._worker=e}return DocumentSymbolAdapter.prototype.provideDocumentSymbols=function(e,t){var r=e.uri;return this._worker(r).then((function(e){return e.findDocumentSymbols(r.toString())})).then((function(e){if(e)return e.map((function(e){return{name:e.name,detail:"",containerName:e.containerName,kind:toSymbolKind(e.kind),range:toRange(e.location.range),selectionRange:toRange(e.location.range),tags:[]}}))}))},DocumentSymbolAdapter}();function fromFormattingOptions(e){return{tabSize:e.tabSize,insertSpaces:e.insertSpaces}}var ct=function(){function DocumentFormattingEditProvider(e){this._worker=e}return DocumentFormattingEditProvider.prototype.provideDocumentFormattingEdits=function(e,t,r){var n=e.uri;return this._worker(n).then((function(e){return e.format(n.toString(),null,fromFormattingOptions(t)).then((function(e){if(e&&0!==e.length)return e.map(toTextEdit)}))}))},DocumentFormattingEditProvider}(),ut=function(){function DocumentRangeFormattingEditProvider(e){this._worker=e}return DocumentRangeFormattingEditProvider.prototype.provideDocumentRangeFormattingEdits=function(e,t,r,n){var i=e.uri;return this._worker(i).then((function(e){return e.format(i.toString(),fromRange(t),fromFormattingOptions(r)).then((function(e){if(e&&0!==e.length)return e.map(toTextEdit)}))}))},DocumentRangeFormattingEditProvider}(),lt=function(){function DocumentColorAdapter(e){this._worker=e}return DocumentColorAdapter.prototype.provideDocumentColors=function(e,t){var r=e.uri;return this._worker(r).then((function(e){return e.findDocumentColors(r.toString())})).then((function(e){if(e)return e.map((function(e){return{color:e.color,range:toRange(e.range)}}))}))},DocumentColorAdapter.prototype.provideColorPresentations=function(e,t,r){var n=e.uri;return this._worker(n).then((function(e){return e.getColorPresentations(n.toString(),t.color,fromRange(t.range))})).then((function(e){if(e)return e.map((function(e){var t={label:e.label};return e.textEdit&&(t.textEdit=toTextEdit(e.textEdit)),e.additionalTextEdits&&(t.additionalTextEdits=e.additionalTextEdits.map(toTextEdit)),t}))}))},DocumentColorAdapter}(),ft=function(){function FoldingRangeAdapter(e){this._worker=e}return FoldingRangeAdapter.prototype.provideFoldingRanges=function(e,t,r){var n=e.uri;return this._worker(n).then((function(e){return e.getFoldingRanges(n.toString(),t)})).then((function(e){if(e)return e.map((function(e){var t={start:e.startLine+1,end:e.endLine+1};return void 0!==e.kind&&(t.kind=function toFoldingRangeKind(e){switch(e){case p.Comment:return i.Mj.FoldingRangeKind.Comment;case p.Imports:return i.Mj.FoldingRangeKind.Imports;case p.Region:return i.Mj.FoldingRangeKind.Region}return}(e.kind)),t}))}))},FoldingRangeAdapter}();var ht=function(){function SelectionRangeAdapter(e){this._worker=e}return SelectionRangeAdapter.prototype.provideSelectionRanges=function(e,t,r){var n=e.uri;return this._worker(n).then((function(e){return e.getSelectionRanges(n.toString(),t.map(fromPosition))})).then((function(e){if(e)return e.map((function(e){for(var t=[];e;)t.push({range:toRange(e.range)}),e=e.parent;return t}))}))},SelectionRangeAdapter}();function createTokenizationSupport(e){return{getInitialState:function(){return new Ot(null,null,!1,null)},tokenize:function(t,r,n,i){return function tokenize(e,t,r,n,i){void 0===n&&(n=0);var o=0,a=!1;switch(r.scanError){case 2:t='"'+t,o=1;break;case 1:t="/*"+t,o=2}var s=N(t),c=r.lastWasColon,u=r.parents,l={tokens:[],endState:r.clone()};for(;;){var f=n+s.getPosition(),h="",p=s.scan();if(17===p)break;if(f===n+s.getPosition())throw new Error("Scanner did not advance, next 3 characters are: "+t.substr(s.getPosition(),3));switch(a&&(f-=o),a=o>0,p){case 1:u=At.push(u,0),h=pt,c=!1;break;case 2:u=At.pop(u),h=pt,c=!1;break;case 3:u=At.push(u,1),h=mt,c=!1;break;case 4:u=At.pop(u),h=mt,c=!1;break;case 6:h=dt,c=!0;break;case 5:h=gt,c=!1;break;case 8:case 9:h=vt,c=!1;break;case 7:h=yt,c=!1;break;case 10:var m=u?u.type:0;h=c||1===m?bt:xt,c=!1;break;case 11:h=St,c=!1}if(e)switch(p){case 12:h=kt;break;case 13:h=Ct}l.endState=new Ot(r.getStateData(),s.getTokenError(),c,u),l.tokens.push({startIndex:f,scopes:h})}return l}(e,t,r,n)}}}var pt="delimiter.bracket.json",mt="delimiter.array.json",dt="delimiter.colon.json",gt="delimiter.comma.json",vt="keyword.json",yt="keyword.json",bt="string.value.json",St="number.json",xt="string.key.json",Ct="comment.block.json",kt="comment.line.json",At=function(){function ParentsStack(e,t){this.parent=e,this.type=t}return ParentsStack.pop=function(e){return e?e.parent:null},ParentsStack.push=function(e,t){return new ParentsStack(e,t)},ParentsStack.equals=function(e,t){if(!e&&!t)return!0;if(!e||!t)return!1;for(;e&&t;){if(e===t)return!0;if(e.type!==t.type)return!1;e=e.parent,t=t.parent}return!0},ParentsStack}(),Ot=function(){function JSONState(e,t,r,n){this._state=e,this.scanError=t,this.lastWasColon=r,this.parents=n}return JSONState.prototype.clone=function(){return new JSONState(this._state,this.scanError,this.lastWasColon,this.parents)},JSONState.prototype.equals=function(e){return e===this||!!(e&&e instanceof JSONState)&&(this.scanError===e.scanError&&this.lastWasColon===e.lastWasColon&&At.equals(this.parents,e.parents))},JSONState.prototype.getStateData=function(){return this._state},JSONState.prototype.setStateData=function(e){this._state=e},JSONState}();function setupMode(e){var t=[],r=[],n=new o(e);t.push(n);var worker=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return n.getLanguageServiceWorker.apply(n,e)};function registerProviders(){var t=e.languageId,n=e.modeConfiguration;disposeAll(r),n.documentFormattingEdits&&r.push(i.Mj.registerDocumentFormattingEditProvider(t,new ct(worker))),n.documentRangeFormattingEdits&&r.push(i.Mj.registerDocumentRangeFormattingEditProvider(t,new ut(worker))),n.completionItems&&r.push(i.Mj.registerCompletionItemProvider(t,new ot(worker))),n.hovers&&r.push(i.Mj.registerHoverProvider(t,new at(worker))),n.documentSymbols&&r.push(i.Mj.registerDocumentSymbolProvider(t,new st(worker))),n.tokens&&r.push(i.Mj.setTokensProvider(t,createTokenizationSupport(!0))),n.colors&&r.push(i.Mj.registerColorProvider(t,new lt(worker))),n.foldingRanges&&r.push(i.Mj.registerFoldingRangeProvider(t,new ft(worker))),n.diagnostics&&r.push(new it(t,worker,e)),n.selectionRanges&&r.push(i.Mj.registerSelectionRangeProvider(t,new ht(worker)))}registerProviders(),t.push(i.Mj.setLanguageConfiguration(e.languageId,Nt));var a=e.modeConfiguration;return e.onDidChange((function(e){e.modeConfiguration!==a&&(a=e.modeConfiguration,registerProviders())})),t.push(asDisposable(r)),asDisposable(t)}function asDisposable(e){return{dispose:function(){return disposeAll(e)}}}function disposeAll(e){for(;e.length;)e.pop().dispose()}var Nt={wordPattern:/(-?\d*\.\d\w*)|([^\[\{\]\}\:\"\,\s]+)/g,comments:{lineComment:"//",blockComment:["/*","*/"]},brackets:[["{","}"],["[","]"]],autoClosingPairs:[{open:"{",close:"}",notIn:["string"]},{open:"[",close:"]",notIn:["string"]},{open:'"',close:'"',notIn:["string"]}]}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,